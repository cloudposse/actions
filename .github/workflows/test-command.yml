name: test
on:
  repository_dispatch:
    types: [test-command]

defaults:
  run:
    # We need -e -o pipefail for consistency with GitHub Actions's default behavior
    shell: bash -e -o pipefail {0}

jobs:
  ack:
    runs-on: ubuntu-latest
    steps:
      - name: "Add reaction üëç"
        uses: cloudposse/actions/github/create-or-update-comment@0.15.0
        with:
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
          reaction-type: "+1"

  ping:
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.slash_command.args.unnamed.arg1 == 'ping' || github.event.client_payload.slash_command.arg1 == 'ping' }}
    steps:
    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for this ref"
      #if: ${{ github.event_name == 'repository_dispatch' }}
      uses: 'docker://cloudposse/github-status-updater'
      with:
        # We need to use args because GitHub actions overwrites many `GITHUB_*` environment variables
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: success
        GITHUB_CONTEXT: 'test/ping'
        GITHUB_DESCRIPTION: "pong"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

  readme:
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.slash_command.args.unnamed.arg1 == 'readme' || github.event.client_payload.slash_command.arg1 == 'readme' || github.event.client_payload.slash_command.args.unnamed.arg1 == 'all' || github.event.client_payload.slash_command.arg1 == 'all' }}
    container: cloudposse/testing.cloudposse.co:latest
    env: 
      MAKE_INCLUDES: Makefile
    steps:
    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: pending
        GITHUB_CONTEXT: "test/readme"
        GITHUB_DESCRIPTION: "tests started by @${{ github.event.client_payload.github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}


    # Checkout the code from GitHub Pull Request
    - name: "Checkout code for ChatOps"
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
        ref: ${{ github.event.client_payload.pull_request.head.ref }} 

    # Initialize the build-harness with make target helpers
    - name: "Initialize build-harness"
      env:
        BUILD_HARNESS_BRANCH: master
      run: make init

    # Run the bats tests from the test-harness against the module
    - name: "Test that README.md was generated from README.yaml"
      run: make readme/lint

    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for failure"
      if: ${{ failure() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: failure
        GITHUB_CONTEXT: "test/readme"
        GITHUB_DESCRIPTION: "tests failed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for success"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: success
        GITHUB_CONTEXT: "test/readme"
        GITHUB_DESCRIPTION: "tests passed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for cancelled"
      if: ${{ cancelled() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: error
        GITHUB_CONTEXT: "test/readme"
        GITHUB_DESCRIPTION: "tests cancelled"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

  bats:
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.slash_command.args.unnamed.arg1 == 'bats' || github.event.client_payload.slash_command.arg1 == 'bats' || github.event.client_payload.slash_command.args.unnamed.arg1 == 'all' || github.event.client_payload.slash_command.arg1 == 'all' }}
    container: cloudposse/testing.cloudposse.co:latest
    env: 
      MAKE_INCLUDES: Makefile
    steps:
    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: pending
        GITHUB_CONTEXT: "test/bats"
        GITHUB_DESCRIPTION: "tests started by @${{ github.event.client_payload.github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

    # Checkout the code from GitHub Pull Request
    - name: "Checkout code for ChatOps"
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
        ref: ${{ github.event.client_payload.pull_request.head.ref }} 

    # Determine requied version of terraform based on the target branch of the pull request. Then update the PATH to use it.
    - name: "Determine required terraform version"
      run: |
        VERSION=$(cut -d/ -f1 <<<${BASE_REF})
        if [[ ${VERSION} == 'master' ]]; then
          VERSION=0.12
        fi

        # Match lables like `terraform/0.12` or nothing (to prevent non-zero exit code) 
        OVERRIDE_VERSION=$(grep -Eo '(terraform/\d+\.\d+|)' <<<${LABELS} | cut -d/ -f2)

        if [ -n "${OVERRIDE_VERSION}" ]; then
          VERSION=${OVERRIDE_VERSION}
          echo "Terraform ${VERSION} is required based on labels..."
        else
          echo "Terraform ${VERSION} is required for ${BASE_REF}..."
        fi

        if [ -x "/usr/local/terraform/${VERSION}/bin/terraform" ]; then
          printf "::set-env name=PATH::/usr/local/terraform/%s/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n" ${VERSION}
        else
          echo "Unable to locate executable for terraform ${VERSION}"
          exit 1
        fi
      env:
        # Pull request target branch
        BASE_REF: ${{ github.event.client_payload.pull_request.base.ref }}
        LABELS: ${{ join(github.event.client_payload.pull_request.labels.*.name, '\n') }}

    # Initialize the test-harness which has a library of bats tests
    - name: "Initialize test-harness"
      env:
        TEST_HARNESS_BRANCH: master
      run: make -C test/ clean init

    # Run the bats tests from the test-harness against the module
    - name: "Test module with bats"
      run: make -C test/ module

    # Run the bats tests from the test-harness against the example
    - name: "Test `examples/complete` with bats"
      run: make -C test/ examples/complete

    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for failure"
      if: ${{ failure() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: failure
        GITHUB_CONTEXT: "test/bats"
        GITHUB_DESCRIPTION: "tests failed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for success"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: success
        GITHUB_CONTEXT: "test/bats"
        GITHUB_DESCRIPTION: "tests passed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for cancelled"
      if: ${{ cancelled() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: error
        GITHUB_CONTEXT: "test/bats"
        GITHUB_DESCRIPTION: "tests cancelled"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

  terratest:
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.slash_command.args.unnamed.arg1 == 'terratest' || github.event.client_payload.slash_command.arg1 == 'terratest' || github.event.client_payload.slash_command.args.unnamed.arg1 == 'all' || github.event.client_payload.slash_command.arg1 == 'all' }}
    container: cloudposse/testing.cloudposse.co:latest
    env: 
      MAKE_INCLUDES: Makefile
    steps:
    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: pending
        GITHUB_CONTEXT: "test/terratest"
        GITHUB_DESCRIPTION: "tests started by @${{ github.event.client_payload.github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

    # Checkout the code from GitHub Pull Request
    - name: "Checkout code for ChatOps"
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
        ref: ${{ github.event.client_payload.pull_request.head.ref }} 

    # Determine requied version of terraform based on the target branch of the pull request. Then update the PATH to use it.
    - name: "Determine required terraform version"
      run: |
        VERSION=$(cut -d/ -f1 <<<${BASE_REF})
        if [[ ${VERSION} == 'master' ]]; then
          VERSION=0.12
        fi

        # Match lables like `terraform/0.12` or nothing (to prevent non-zero exit code) 
        OVERRIDE_VERSION=$(grep -Eo '(terraform/\d+\.\d+|)' <<<${LABELS} | cut -d/ -f2)

        if [ -n "${OVERRIDE_VERSION}" ]; then
          VERSION=${OVERRIDE_VERSION}
          echo "Terraform ${VERSION} is required based on labels..."
        else
          echo "Terraform ${VERSION} is required for ${BASE_REF}..."
        fi

        if [ -x "/usr/local/terraform/${VERSION}/bin/terraform" ]; then
          printf "::set-env name=PATH::/usr/local/terraform/%s/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n" ${VERSION}
        else
          echo "Unable to locate executable for terraform ${VERSION}"
          exit 1
        fi
      env:
        # Pull request target branch
        BASE_REF: ${{ github.event.client_payload.pull_request.base.ref }}
        LABELS: ${{ join(github.event.client_payload.pull_request.labels.*.name, '\n') }}

    # Initialize the terratest go project
    - name: "Initialize terratest go project"
      run: make -C test/src clean init

    # Run the terratest integration tests without credentials
    - name: "Test `examples/complete` with terratest locally, without credentials"
      if: ${{ contains(github.event.client_payload.github.payload.repository.name, 'terraform-null-') }}
      run: make -C test/src

    # Run the terratest integration tests with only AWS credentials
    - name: "Test `examples/complete` with terratest on AWS"
      if: ${{ contains(github.event.client_payload.github.payload.repository.name, 'terraform-aws-') && !( contains(github.event.client_payload.github.payload.repository.name, '-github-') || contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-github-provider') ) }}
      run: make -C test/src
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

    # Run the terratest integration tests with only GitHub credentials
    - name: "Test `examples/complete` with terratest on GitHub"
      if: ${{ contains(github.event.client_payload.github.payload.repository.name, 'terraform-github-') }}
      run: make -C test/src
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}

    # Run the terratest integration tests with only Opsgenie credentials
    - name: "Test `examples/complete` with terratest on Opsgenie"
      if: ${{ contains(github.event.client_payload.github.payload.repository.name, 'terraform-opsgenie-') }}
      run: make -C test/src
      env:
        OPSGENIE_API_KEY: ${{ secrets.OPSGENIE_API_KEY }}

    # Run the terratest integration tests with both AWS and GitHub credentials
    - name: "Test `examples/complete` with terratest on AWS & GitHub"
      if: ${{ contains(github.event.client_payload.github.payload.repository.name, 'terraform-aws-') && ( contains(github.event.client_payload.github.payload.repository.name, '-github-') || contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-github-provider') ) }}
      run: make -C test/src
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}  
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}

    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for failure"
      if: ${{ failure() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: failure
        GITHUB_CONTEXT: "test/terratest"
        GITHUB_DESCRIPTION: "tests failed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for this success"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: success
        GITHUB_CONTEXT: "test/terratest"
        GITHUB_DESCRIPTION: "tests passed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

    # Update GitHub status for dispatch events
    - name: "Update GitHub Status for cancelled"
      if: ${{ cancelled() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -ref ${{ github.event.client_payload.pull_request.head.sha }} -repo ${{ github.event.client_payload.github.payload.repository.name }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
        GITHUB_STATE: error
        GITHUB_CONTEXT: "test/terratest"
        GITHUB_DESCRIPTION: "tests cancelled"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref }} 
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login }}

