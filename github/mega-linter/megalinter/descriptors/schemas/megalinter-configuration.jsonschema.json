{
  "$id": "http://github.com/nvuillam/megalinter-configuration.json",
  "$schema": "http://json-schema.org/draft-07/schema",
  "additionalProperties": false,
  "definitions": {
    "command_info": {
      "description": "Command information",
      "properties": {
        "command": {
          "examples": [
            "npm run test",
            "echo \"This is a custom command\""
          ],
          "title": "Bash command to run",
          "type": "string"
        },
        "continue_if_failed": {
          "Description": "If command fails, continue Mega-Linter process or not",
          "default": true,
          "title": "Continue if failed",
          "type": "boolean"
        },
        "cwd": {
          "enum": [
            "root",
            "workspace"
          ],
          "examples": [
            "root",
            "workspace"
          ],
          "title": "Folder where to run the command",
          "type": "string"
        }
      },
      "required": [],
      "title": "Command",
      "type": "object"
    },
    "enum_descriptor_keys": {
      "enum": [
        "ANSIBLE",
        "ARM",
        "BASH",
        "C",
        "CLOJURE",
        "CLOUDFORMATION",
        "COFFEE",
        "COPYPASTE",
        "CPP",
        "CSHARP",
        "CSS",
        "DART",
        "DOCKERFILE",
        "EDITORCONFIG",
        "ENV",
        "GHERKIN",
        "GIT",
        "GO",
        "GRAPHQL",
        "GROOVY",
        "HTML",
        "JAVA",
        "JAVASCRIPT",
        "JSON",
        "JSX",
        "KOTLIN",
        "KUBERNETES",
        "LATEX",
        "LUA",
        "MARKDOWN",
        "OPENAPI",
        "PERL",
        "PHP",
        "POWERSHELL",
        "PROTOBUF",
        "PUPPET",
        "PYTHON",
        "R",
        "RAKU",
        "RST",
        "RUBY",
        "RUST",
        "SALESFORCE",
        "SCALA",
        "SNAKEMAKE",
        "SPELL",
        "SQL",
        "TEKTON",
        "TERRAFORM",
        "TSX",
        "TYPESCRIPT",
        "VBDOTNET",
        "XML",
        "YAML"
      ],
      "type": "string"
    },
    "enum_linter_keys": {
      "enum": [
        "ANSIBLE_ANSIBLE_LINT",
        "ARM_ARM_TTK",
        "BASH_EXEC",
        "BASH_SHELLCHECK",
        "BASH_SHFMT",
        "C_CPPLINT",
        "CLOJURE_CLJ_KONDO",
        "CLOUDFORMATION_CFN_LINT",
        "COFFEE_COFFEELINT",
        "COPYPASTE_JSCPD",
        "CPP_CPPLINT",
        "CSHARP_DOTNET_FORMAT",
        "CSS_STYLELINT",
        "CSS_SCSS_LINT",
        "DART_DARTANALYZER",
        "DOCKERFILE_DOCKERFILELINT",
        "DOCKERFILE_HADOLINT",
        "EDITORCONFIG_EDITORCONFIG_CHECKER",
        "ENV_DOTENV_LINTER",
        "GHERKIN_GHERKIN_LINT",
        "GIT_GIT_DIFF",
        "GO_GOLANGCI_LINT",
        "GRAPHQL_GRAPHQL_SCHEMA_LINTER",
        "GROOVY_NPM_GROOVY_LINT",
        "HTML_HTMLHINT",
        "JAVA_CHECKSTYLE",
        "JAVASCRIPT_ES",
        "JAVASCRIPT_STANDARD",
        "JAVASCRIPT_PRETTIER",
        "JSON_JSONLINT",
        "JSON_ESLINT_PLUGIN_JSONC",
        "JSON_V8R",
        "JSX_ESLINT",
        "KOTLIN_KTLINT",
        "KUBERNETES_KUBEVAL",
        "LATEX_CHKTEX",
        "LUA_LUACHECK",
        "MARKDOWN_MARKDOWNLINT",
        "MARKDOWN_REMARK_LINT",
        "MARKDOWN_MARKDOWN_LINK_CHECK",
        "MARKDOWN_MARKDOWN_TABLE_FORMATTER",
        "OPENAPI_SPECTRAL",
        "PERL_PERLCRITIC",
        "PHP_BUILTIN",
        "PHP_PHPCS",
        "PHP_PHPSTAN",
        "PHP_PSALM",
        "POWERSHELL_POWERSHELL",
        "PROTOBUF_PROTOLINT",
        "PUPPET_PUPPET_LINT",
        "PYTHON_PYLINT",
        "PYTHON_BLACK",
        "PYTHON_FLAKE8",
        "PYTHON_ISORT",
        "R_LINTR",
        "RAKU_RAKU",
        "RST_RST_LINT",
        "RST_RSTCHECK",
        "RST_RSTFMT",
        "RUBY_RUBOCOP",
        "RUST_CLIPPY",
        "SALESFORCE_SFDX_SCANNER",
        "SCALA_SCALAFIX",
        "SNAKEMAKE_LINT",
        "SNAKEMAKE_SNAKEFMT",
        "SPELL_MISSPELL",
        "SPELL_CSPELL",
        "SQL_SQL_LINT",
        "TEKTON_TEKTON_LINT",
        "TERRAFORM_TFLINT",
        "TERRAFORM_TERRASCAN",
        "TERRAFORM_TERRAGRUNT",
        "TSX_ESLINT",
        "TYPESCRIPT_ES",
        "TYPESCRIPT_STANDARD",
        "TYPESCRIPT_PRETTIER",
        "VBDOTNET_DOTNET_FORMAT",
        "XML_XMLLINT",
        "YAML_YAMLLINT",
        "YAML_V8R"
      ],
      "type": "string"
    }
  },
  "description": "Mega-Linter configuration file",
  "enum_linter_keys": {
    "enum": [
      "ANSIBLE_ANSIBLE_LINT",
      "ARM_ARM_TTK",
      "BASH_EXEC",
      "BASH_SHELLCHECK",
      "BASH_SHFMT",
      "C_CPPLINT",
      "CLOJURE_CLJ_KONDO",
      "CLOUDFORMATION_CFN_LINT",
      "COFFEE_COFFEELINT",
      "COPYPASTE_JSCPD",
      "CPP_CPPLINT",
      "CSHARP_DOTNET_FORMAT",
      "CSS_STYLELINT",
      "CSS_SCSS_LINT",
      "DART_DARTANALYZER",
      "DOCKERFILE_DOCKERFILELINT",
      "DOCKERFILE_HADOLINT",
      "EDITORCONFIG_EDITORCONFIG_CHECKER",
      "ENV_DOTENV_LINTER",
      "GHERKIN_GHERKIN_LINT",
      "GIT_GIT_DIFF",
      "GO_GOLANGCI_LINT",
      "GRAPHQL_GRAPHQL_SCHEMA_LINTER",
      "GROOVY_NPM_GROOVY_LINT",
      "HTML_HTMLHINT",
      "JAVA_CHECKSTYLE",
      "JAVASCRIPT_ES",
      "JAVASCRIPT_STANDARD",
      "JAVASCRIPT_PRETTIER",
      "JSON_JSONLINT",
      "JSON_ESLINT_PLUGIN_JSONC",
      "JSON_V8R",
      "JSX_ESLINT",
      "KOTLIN_KTLINT",
      "KUBERNETES_KUBEVAL",
      "LATEX_CHKTEX",
      "LUA_LUACHECK",
      "MARKDOWN_MARKDOWNLINT",
      "MARKDOWN_REMARK_LINT",
      "MARKDOWN_MARKDOWN_LINK_CHECK",
      "OPENAPI_SPECTRAL",
      "PERL_PERLCRITIC",
      "PHP_BUILTIN",
      "PHP_PHPCS",
      "PHP_PHPSTAN",
      "PHP_PSALM",
      "POWERSHELL_POWERSHELL",
      "PROTOBUF_PROTOLINT",
      "PUPPET_PUPPET_LINT",
      "PYTHON_PYLINT",
      "PYTHON_BLACK",
      "PYTHON_FLAKE8",
      "PYTHON_ISORT",
      "R_LINTR",
      "RAKU_RAKU",
      "RST_RST_LINT",
      "RST_RSTCHECK",
      "RST_RSTFMT",
      "RUBY_RUBOCOP",
      "RUST_CLIPPY",
      "SALESFORCE_SFDX_SCANNER",
      "SCALA_SCALAFIX",
      "SNAKEMAKE_LINT",
      "SNAKEMAKE_SNAKEFMT",
      "SPELL_MISSPELL",
      "SPELL_CSPELL",
      "SQL_SQL_LINT",
      "TEKTON_TEKTON_LINT",
      "TERRAFORM_TFLINT",
      "TERRAFORM_TERRASCAN",
      "TERRAFORM_TERRAGRUNT",
      "TSX_ESLINT",
      "TYPESCRIPT_ES",
      "TYPESCRIPT_STANDARD",
      "TYPESCRIPT_PRETTIER",
      "VBDOTNET_DOTNET_FORMAT",
      "XML_XMLLINT",
      "YAML_YAMLLINT",
      "YAML_V8R"
    ],
    "type": "string"
  },
  "properties": {
    "ADDITIONAL_EXCLUDED_DIRECTORIES": {
      "$id": "#/properties/ADDITIONAL_EXCLUDED_DIRECTORIES",
      "description": "List of additional excluded directory basenames to add to Mega-Linter default excluded directories. They are excluded at any nested level.",
      "examples": [
        [
          "test"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Additional excluded directories",
      "type": "array"
    },
    "ANSIBLE_ANSIBLE_LINT_ARGUMENTS": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_ARGUMENTS",
      "description": "ANSIBLE_ANSIBLE_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ANSIBLE_ANSIBLE_LINT_CONFIG_FILE": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_CONFIG_FILE",
      "default": ".ansible-lint.yml",
      "description": "ANSIBLE_ANSIBLE_LINT: User custom config file name if different from default",
      "title": "ANSIBLE_ANSIBLE_LINT: Custom config file name",
      "type": "string"
    },
    "ANSIBLE_ANSIBLE_LINT_DIRECTORY": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_DIRECTORY",
      "default": "ansible",
      "title": "ANSIBLE_ANSIBLE_LINT: Directory containing ANSIBLE files",
      "type": "string"
    },
    "ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "ANSIBLE_ANSIBLE_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "ANSIBLE_ANSIBLE_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "ANSIBLE_ANSIBLE_LINT_FILE_NAME": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_FILE_NAME",
      "default": ".ansible-lint.yml",
      "description": "ANSIBLE_ANSIBLE_LINT: User custom config file name if different from default",
      "title": "ANSIBLE_ANSIBLE_LINT: Custom config file name",
      "type": "string"
    },
    "ANSIBLE_ANSIBLE_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "ANSIBLE_ANSIBLE_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "ANSIBLE_ANSIBLE_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_FILTER_REGEX_EXCLUDE",
      "title": "ANSIBLE_ANSIBLE_LINT: Excluding Regex",
      "type": "string"
    },
    "ANSIBLE_ANSIBLE_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_FILTER_REGEX_INCLUDE",
      "title": "ANSIBLE_ANSIBLE_LINT: Including Regex",
      "type": "string"
    },
    "ANSIBLE_ANSIBLE_LINT_RULES_PATH": {
      "$id": "#/properties/ANSIBLE_ANSIBLE_LINT_RULES_PATH",
      "description": "ANSIBLE_ANSIBLE_LINT: Path where to find linter configuration file",
      "title": "ANSIBLE_ANSIBLE_LINT: Custom config file path",
      "type": "string"
    },
    "ANSIBLE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ANSIBLE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for ANSIBLE descriptor",
      "type": "string"
    },
    "ANSIBLE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ANSIBLE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for ANSIBLE descriptor",
      "type": "string"
    },
    "APPLY_FIXES": {
      "$id": "#/properties/APPLY_FIXES",
      "default": "none",
      "description": "'all' to apply formatting and auto-fixes of all linters, or a list of linter keys",
      "examples": [
        "all",
        "none",
        [
          "JAVASCRIPT_ES",
          "MARKDOWN_MARKDOWNLINT"
        ]
      ],
      "title": "Apply linters formatting and auto-fixes",
      "type": [
        "array",
        "string"
      ]
    },
    "ARM_ARM_TTK_ARGUMENTS": {
      "$id": "#/properties/ARM_ARM_TTK_ARGUMENTS",
      "description": "ARM_ARM_TTK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ARM_ARM_TTK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ARM_ARM_TTK_CONFIG_FILE": {
      "$id": "#/properties/ARM_ARM_TTK_CONFIG_FILE",
      "default": ".arm-ttk.psd1",
      "description": "ARM_ARM_TTK: User custom config file name if different from default",
      "title": "ARM_ARM_TTK: Custom config file name",
      "type": "string"
    },
    "ARM_ARM_TTK_DISABLE_ERRORS": {
      "$id": "#/properties/ARM_ARM_TTK_DISABLE_ERRORS",
      "default": false,
      "title": "ARM_ARM_TTK: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "ARM_ARM_TTK_FILE_EXTENSIONS": {
      "$id": "#/properties/ARM_ARM_TTK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "ARM_ARM_TTK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "ARM_ARM_TTK_FILE_NAME": {
      "$id": "#/properties/ARM_ARM_TTK_FILE_NAME",
      "default": ".arm-ttk.psd1",
      "description": "ARM_ARM_TTK: User custom config file name if different from default",
      "title": "ARM_ARM_TTK: Custom config file name",
      "type": "string"
    },
    "ARM_ARM_TTK_FILE_NAMES_REGEX": {
      "$id": "#/properties/ARM_ARM_TTK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "ARM_ARM_TTK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "ARM_ARM_TTK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ARM_ARM_TTK_FILTER_REGEX_EXCLUDE",
      "title": "ARM_ARM_TTK: Excluding Regex",
      "type": "string"
    },
    "ARM_ARM_TTK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ARM_ARM_TTK_FILTER_REGEX_INCLUDE",
      "title": "ARM_ARM_TTK: Including Regex",
      "type": "string"
    },
    "ARM_ARM_TTK_RULES_PATH": {
      "$id": "#/properties/ARM_ARM_TTK_RULES_PATH",
      "description": "ARM_ARM_TTK: Path where to find linter configuration file",
      "title": "ARM_ARM_TTK: Custom config file path",
      "type": "string"
    },
    "ARM_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ARM_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for ARM descriptor",
      "type": "string"
    },
    "ARM_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ARM_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for ARM descriptor",
      "type": "string"
    },
    "BASH_EXEC_ARGUMENTS": {
      "$id": "#/properties/BASH_EXEC_ARGUMENTS",
      "description": "BASH_EXEC: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_EXEC: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BASH_EXEC_DISABLE_ERRORS": {
      "$id": "#/properties/BASH_EXEC_DISABLE_ERRORS",
      "default": false,
      "title": "BASH_EXEC: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "BASH_EXEC_FILE_EXTENSIONS": {
      "$id": "#/properties/BASH_EXEC_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_EXEC: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "BASH_EXEC_FILE_NAMES_REGEX": {
      "$id": "#/properties/BASH_EXEC_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_EXEC: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "BASH_EXEC_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/BASH_EXEC_FILTER_REGEX_EXCLUDE",
      "title": "BASH_EXEC: Excluding Regex",
      "type": "string"
    },
    "BASH_EXEC_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/BASH_EXEC_FILTER_REGEX_INCLUDE",
      "title": "BASH_EXEC: Including Regex",
      "type": "string"
    },
    "BASH_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/BASH_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for BASH descriptor",
      "type": "string"
    },
    "BASH_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/BASH_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for BASH descriptor",
      "type": "string"
    },
    "BASH_SHELLCHECK_ARGUMENTS": {
      "$id": "#/properties/BASH_SHELLCHECK_ARGUMENTS",
      "description": "BASH_SHELLCHECK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHELLCHECK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BASH_SHELLCHECK_DISABLE_ERRORS": {
      "$id": "#/properties/BASH_SHELLCHECK_DISABLE_ERRORS",
      "default": false,
      "title": "BASH_SHELLCHECK: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "BASH_SHELLCHECK_FILE_EXTENSIONS": {
      "$id": "#/properties/BASH_SHELLCHECK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHELLCHECK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "BASH_SHELLCHECK_FILE_NAMES_REGEX": {
      "$id": "#/properties/BASH_SHELLCHECK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHELLCHECK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "BASH_SHELLCHECK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/BASH_SHELLCHECK_FILTER_REGEX_EXCLUDE",
      "title": "BASH_SHELLCHECK: Excluding Regex",
      "type": "string"
    },
    "BASH_SHELLCHECK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/BASH_SHELLCHECK_FILTER_REGEX_INCLUDE",
      "title": "BASH_SHELLCHECK: Including Regex",
      "type": "string"
    },
    "BASH_SHFMT_ARGUMENTS": {
      "$id": "#/properties/BASH_SHFMT_ARGUMENTS",
      "description": "BASH_SHFMT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHFMT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "BASH_SHFMT_DISABLE_ERRORS": {
      "$id": "#/properties/BASH_SHFMT_DISABLE_ERRORS",
      "default": false,
      "title": "BASH_SHFMT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "BASH_SHFMT_FILE_EXTENSIONS": {
      "$id": "#/properties/BASH_SHFMT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHFMT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "BASH_SHFMT_FILE_NAMES_REGEX": {
      "$id": "#/properties/BASH_SHFMT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "BASH_SHFMT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "BASH_SHFMT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/BASH_SHFMT_FILTER_REGEX_EXCLUDE",
      "title": "BASH_SHFMT: Excluding Regex",
      "type": "string"
    },
    "BASH_SHFMT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/BASH_SHFMT_FILTER_REGEX_INCLUDE",
      "title": "BASH_SHFMT: Including Regex",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_ARGUMENTS": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_ARGUMENTS",
      "description": "CLOJURE_CLJ_KONDO: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJ_KONDO: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CLOJURE_CLJ_KONDO_CONFIG_FILE": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_CONFIG_FILE",
      "default": ".clj-kondo/config.edn",
      "description": "CLOJURE_CLJ_KONDO: User custom config file name if different from default",
      "title": "CLOJURE_CLJ_KONDO: Custom config file name",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_DISABLE_ERRORS": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_DISABLE_ERRORS",
      "default": false,
      "title": "CLOJURE_CLJ_KONDO: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "CLOJURE_CLJ_KONDO_FILE_EXTENSIONS": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJ_KONDO: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CLOJURE_CLJ_KONDO_FILE_NAME": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_FILE_NAME",
      "default": ".clj-kondo/config.edn",
      "description": "CLOJURE_CLJ_KONDO: User custom config file name if different from default",
      "title": "CLOJURE_CLJ_KONDO: Custom config file name",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_FILE_NAMES_REGEX": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOJURE_CLJ_KONDO: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CLOJURE_CLJ_KONDO_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_FILTER_REGEX_EXCLUDE",
      "title": "CLOJURE_CLJ_KONDO: Excluding Regex",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_FILTER_REGEX_INCLUDE",
      "title": "CLOJURE_CLJ_KONDO: Including Regex",
      "type": "string"
    },
    "CLOJURE_CLJ_KONDO_RULES_PATH": {
      "$id": "#/properties/CLOJURE_CLJ_KONDO_RULES_PATH",
      "description": "CLOJURE_CLJ_KONDO: Path where to find linter configuration file",
      "title": "CLOJURE_CLJ_KONDO: Custom config file path",
      "type": "string"
    },
    "CLOJURE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CLOJURE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CLOJURE descriptor",
      "type": "string"
    },
    "CLOJURE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CLOJURE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CLOJURE descriptor",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_ARGUMENTS": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_ARGUMENTS",
      "description": "CLOUDFORMATION_CFN_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOUDFORMATION_CFN_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CLOUDFORMATION_CFN_LINT_CONFIG_FILE": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_CONFIG_FILE",
      "default": ".cfnlintrc.yml",
      "description": "CLOUDFORMATION_CFN_LINT: User custom config file name if different from default",
      "title": "CLOUDFORMATION_CFN_LINT: Custom config file name",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "CLOUDFORMATION_CFN_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "CLOUDFORMATION_CFN_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOUDFORMATION_CFN_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CLOUDFORMATION_CFN_LINT_FILE_NAME": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_FILE_NAME",
      "default": ".cfnlintrc.yml",
      "description": "CLOUDFORMATION_CFN_LINT: User custom config file name if different from default",
      "title": "CLOUDFORMATION_CFN_LINT: Custom config file name",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CLOUDFORMATION_CFN_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CLOUDFORMATION_CFN_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_FILTER_REGEX_EXCLUDE",
      "title": "CLOUDFORMATION_CFN_LINT: Excluding Regex",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_FILTER_REGEX_INCLUDE",
      "title": "CLOUDFORMATION_CFN_LINT: Including Regex",
      "type": "string"
    },
    "CLOUDFORMATION_CFN_LINT_RULES_PATH": {
      "$id": "#/properties/CLOUDFORMATION_CFN_LINT_RULES_PATH",
      "description": "CLOUDFORMATION_CFN_LINT: Path where to find linter configuration file",
      "title": "CLOUDFORMATION_CFN_LINT: Custom config file path",
      "type": "string"
    },
    "CLOUDFORMATION_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CLOUDFORMATION_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CLOUDFORMATION descriptor",
      "type": "string"
    },
    "CLOUDFORMATION_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CLOUDFORMATION_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CLOUDFORMATION descriptor",
      "type": "string"
    },
    "COFFEE_COFFEELINT_ARGUMENTS": {
      "$id": "#/properties/COFFEE_COFFEELINT_ARGUMENTS",
      "description": "COFFEE_COFFEELINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "COFFEE_COFFEELINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "COFFEE_COFFEELINT_CONFIG_FILE": {
      "$id": "#/properties/COFFEE_COFFEELINT_CONFIG_FILE",
      "default": ".coffee-lint.json",
      "description": "COFFEE_COFFEELINT: User custom config file name if different from default",
      "title": "COFFEE_COFFEELINT: Custom config file name",
      "type": "string"
    },
    "COFFEE_COFFEELINT_DISABLE_ERRORS": {
      "$id": "#/properties/COFFEE_COFFEELINT_DISABLE_ERRORS",
      "default": false,
      "title": "COFFEE_COFFEELINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "COFFEE_COFFEELINT_FILE_EXTENSIONS": {
      "$id": "#/properties/COFFEE_COFFEELINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "COFFEE_COFFEELINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "COFFEE_COFFEELINT_FILE_NAME": {
      "$id": "#/properties/COFFEE_COFFEELINT_FILE_NAME",
      "default": ".coffee-lint.json",
      "description": "COFFEE_COFFEELINT: User custom config file name if different from default",
      "title": "COFFEE_COFFEELINT: Custom config file name",
      "type": "string"
    },
    "COFFEE_COFFEELINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/COFFEE_COFFEELINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "COFFEE_COFFEELINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "COFFEE_COFFEELINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/COFFEE_COFFEELINT_FILTER_REGEX_EXCLUDE",
      "title": "COFFEE_COFFEELINT: Excluding Regex",
      "type": "string"
    },
    "COFFEE_COFFEELINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/COFFEE_COFFEELINT_FILTER_REGEX_INCLUDE",
      "title": "COFFEE_COFFEELINT: Including Regex",
      "type": "string"
    },
    "COFFEE_COFFEELINT_RULES_PATH": {
      "$id": "#/properties/COFFEE_COFFEELINT_RULES_PATH",
      "description": "COFFEE_COFFEELINT: Path where to find linter configuration file",
      "title": "COFFEE_COFFEELINT: Custom config file path",
      "type": "string"
    },
    "COFFEE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/COFFEE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for COFFEE descriptor",
      "type": "string"
    },
    "COFFEE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/COFFEE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for COFFEE descriptor",
      "type": "string"
    },
    "COPYPASTE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/COPYPASTE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for COPYPASTE descriptor",
      "type": "string"
    },
    "COPYPASTE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/COPYPASTE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for COPYPASTE descriptor",
      "type": "string"
    },
    "COPYPASTE_JSCPD_ARGUMENTS": {
      "$id": "#/properties/COPYPASTE_JSCPD_ARGUMENTS",
      "description": "COPYPASTE_JSCPD: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "COPYPASTE_JSCPD: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "COPYPASTE_JSCPD_CONFIG_FILE": {
      "$id": "#/properties/COPYPASTE_JSCPD_CONFIG_FILE",
      "default": ".jscpd.json",
      "description": "COPYPASTE_JSCPD: User custom config file name if different from default",
      "title": "COPYPASTE_JSCPD: Custom config file name",
      "type": "string"
    },
    "COPYPASTE_JSCPD_DISABLE_ERRORS": {
      "$id": "#/properties/COPYPASTE_JSCPD_DISABLE_ERRORS",
      "default": false,
      "title": "COPYPASTE_JSCPD: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "COPYPASTE_JSCPD_FILE_EXTENSIONS": {
      "$id": "#/properties/COPYPASTE_JSCPD_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "COPYPASTE_JSCPD: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "COPYPASTE_JSCPD_FILE_NAME": {
      "$id": "#/properties/COPYPASTE_JSCPD_FILE_NAME",
      "default": ".jscpd.json",
      "description": "COPYPASTE_JSCPD: User custom config file name if different from default",
      "title": "COPYPASTE_JSCPD: Custom config file name",
      "type": "string"
    },
    "COPYPASTE_JSCPD_FILE_NAMES_REGEX": {
      "$id": "#/properties/COPYPASTE_JSCPD_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "COPYPASTE_JSCPD: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "COPYPASTE_JSCPD_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/COPYPASTE_JSCPD_FILTER_REGEX_EXCLUDE",
      "title": "COPYPASTE_JSCPD: Excluding Regex",
      "type": "string"
    },
    "COPYPASTE_JSCPD_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/COPYPASTE_JSCPD_FILTER_REGEX_INCLUDE",
      "title": "COPYPASTE_JSCPD: Including Regex",
      "type": "string"
    },
    "COPYPASTE_JSCPD_RULES_PATH": {
      "$id": "#/properties/COPYPASTE_JSCPD_RULES_PATH",
      "description": "COPYPASTE_JSCPD: Path where to find linter configuration file",
      "title": "COPYPASTE_JSCPD: Custom config file path",
      "type": "string"
    },
    "CPP_CPPLINT_ARGUMENTS": {
      "$id": "#/properties/CPP_CPPLINT_ARGUMENTS",
      "description": "CPP_CPPLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CPPLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CPP_CPPLINT_DISABLE_ERRORS": {
      "$id": "#/properties/CPP_CPPLINT_DISABLE_ERRORS",
      "default": false,
      "title": "CPP_CPPLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "CPP_CPPLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/CPP_CPPLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CPPLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CPP_CPPLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CPP_CPPLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CPP_CPPLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CPP_CPPLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CPP_CPPLINT_FILTER_REGEX_EXCLUDE",
      "title": "CPP_CPPLINT: Excluding Regex",
      "type": "string"
    },
    "CPP_CPPLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CPP_CPPLINT_FILTER_REGEX_INCLUDE",
      "title": "CPP_CPPLINT: Including Regex",
      "type": "string"
    },
    "CPP_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CPP_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CPP descriptor",
      "type": "string"
    },
    "CPP_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CPP_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CPP descriptor",
      "type": "string"
    },
    "CSHARP_DOTNET_FORMAT_ARGUMENTS": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_ARGUMENTS",
      "description": "CSHARP_DOTNET_FORMAT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_DOTNET_FORMAT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSHARP_DOTNET_FORMAT_DISABLE_ERRORS": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_DISABLE_ERRORS",
      "default": false,
      "title": "CSHARP_DOTNET_FORMAT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "CSHARP_DOTNET_FORMAT_FILE_EXTENSIONS": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_DOTNET_FORMAT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CSHARP_DOTNET_FORMAT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSHARP_DOTNET_FORMAT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CSHARP_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE",
      "title": "CSHARP_DOTNET_FORMAT: Excluding Regex",
      "type": "string"
    },
    "CSHARP_DOTNET_FORMAT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSHARP_DOTNET_FORMAT_FILTER_REGEX_INCLUDE",
      "title": "CSHARP_DOTNET_FORMAT: Including Regex",
      "type": "string"
    },
    "CSHARP_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSHARP_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CSHARP descriptor",
      "type": "string"
    },
    "CSHARP_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSHARP_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CSHARP descriptor",
      "type": "string"
    },
    "CSS_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSS_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for CSS descriptor",
      "type": "string"
    },
    "CSS_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSS_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for CSS descriptor",
      "type": "string"
    },
    "CSS_SCSS_LINT_ARGUMENTS": {
      "$id": "#/properties/CSS_SCSS_LINT_ARGUMENTS",
      "description": "CSS_SCSS_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_SCSS_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSS_SCSS_LINT_CONFIG_FILE": {
      "$id": "#/properties/CSS_SCSS_LINT_CONFIG_FILE",
      "default": ".scss-lint.yml",
      "description": "CSS_SCSS_LINT: User custom config file name if different from default",
      "title": "CSS_SCSS_LINT: Custom config file name",
      "type": "string"
    },
    "CSS_SCSS_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/CSS_SCSS_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "CSS_SCSS_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "CSS_SCSS_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/CSS_SCSS_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_SCSS_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CSS_SCSS_LINT_FILE_NAME": {
      "$id": "#/properties/CSS_SCSS_LINT_FILE_NAME",
      "default": ".scss-lint.yml",
      "description": "CSS_SCSS_LINT: User custom config file name if different from default",
      "title": "CSS_SCSS_LINT: Custom config file name",
      "type": "string"
    },
    "CSS_SCSS_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CSS_SCSS_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_SCSS_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CSS_SCSS_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSS_SCSS_LINT_FILTER_REGEX_EXCLUDE",
      "title": "CSS_SCSS_LINT: Excluding Regex",
      "type": "string"
    },
    "CSS_SCSS_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSS_SCSS_LINT_FILTER_REGEX_INCLUDE",
      "title": "CSS_SCSS_LINT: Including Regex",
      "type": "string"
    },
    "CSS_SCSS_LINT_RULES_PATH": {
      "$id": "#/properties/CSS_SCSS_LINT_RULES_PATH",
      "description": "CSS_SCSS_LINT: Path where to find linter configuration file",
      "title": "CSS_SCSS_LINT: Custom config file path",
      "type": "string"
    },
    "CSS_STYLELINT_ARGUMENTS": {
      "$id": "#/properties/CSS_STYLELINT_ARGUMENTS",
      "description": "CSS_STYLELINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_STYLELINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "CSS_STYLELINT_CONFIG_FILE": {
      "$id": "#/properties/CSS_STYLELINT_CONFIG_FILE",
      "default": ".stylelintrc.json",
      "description": "CSS_STYLELINT: User custom config file name if different from default",
      "title": "CSS_STYLELINT: Custom config file name",
      "type": "string"
    },
    "CSS_STYLELINT_DISABLE_ERRORS": {
      "$id": "#/properties/CSS_STYLELINT_DISABLE_ERRORS",
      "default": false,
      "title": "CSS_STYLELINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "CSS_STYLELINT_FILE_EXTENSIONS": {
      "$id": "#/properties/CSS_STYLELINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_STYLELINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "CSS_STYLELINT_FILE_NAME": {
      "$id": "#/properties/CSS_STYLELINT_FILE_NAME",
      "default": ".stylelintrc.json",
      "description": "CSS_STYLELINT: User custom config file name if different from default",
      "title": "CSS_STYLELINT: Custom config file name",
      "type": "string"
    },
    "CSS_STYLELINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/CSS_STYLELINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "CSS_STYLELINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "CSS_STYLELINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/CSS_STYLELINT_FILTER_REGEX_EXCLUDE",
      "title": "CSS_STYLELINT: Excluding Regex",
      "type": "string"
    },
    "CSS_STYLELINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/CSS_STYLELINT_FILTER_REGEX_INCLUDE",
      "title": "CSS_STYLELINT: Including Regex",
      "type": "string"
    },
    "CSS_STYLELINT_RULES_PATH": {
      "$id": "#/properties/CSS_STYLELINT_RULES_PATH",
      "description": "CSS_STYLELINT: Path where to find linter configuration file",
      "title": "CSS_STYLELINT: Custom config file path",
      "type": "string"
    },
    "C_CPPLINT_ARGUMENTS": {
      "$id": "#/properties/C_CPPLINT_ARGUMENTS",
      "description": "C_CPPLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CPPLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "C_CPPLINT_DISABLE_ERRORS": {
      "$id": "#/properties/C_CPPLINT_DISABLE_ERRORS",
      "default": false,
      "title": "C_CPPLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "C_CPPLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/C_CPPLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CPPLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "C_CPPLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/C_CPPLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "C_CPPLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "C_CPPLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/C_CPPLINT_FILTER_REGEX_EXCLUDE",
      "title": "C_CPPLINT: Excluding Regex",
      "type": "string"
    },
    "C_CPPLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/C_CPPLINT_FILTER_REGEX_INCLUDE",
      "title": "C_CPPLINT: Including Regex",
      "type": "string"
    },
    "C_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/C_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for C descriptor",
      "type": "string"
    },
    "C_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/C_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for C descriptor",
      "type": "string"
    },
    "DART_DARTANALYZER_ARGUMENTS": {
      "$id": "#/properties/DART_DARTANALYZER_ARGUMENTS",
      "description": "DART_DARTANALYZER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "DART_DARTANALYZER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "DART_DARTANALYZER_CONFIG_FILE": {
      "$id": "#/properties/DART_DARTANALYZER_CONFIG_FILE",
      "default": "analysis_options.yml",
      "description": "DART_DARTANALYZER: User custom config file name if different from default",
      "title": "DART_DARTANALYZER: Custom config file name",
      "type": "string"
    },
    "DART_DARTANALYZER_DISABLE_ERRORS": {
      "$id": "#/properties/DART_DARTANALYZER_DISABLE_ERRORS",
      "default": false,
      "title": "DART_DARTANALYZER: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "DART_DARTANALYZER_FILE_EXTENSIONS": {
      "$id": "#/properties/DART_DARTANALYZER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "DART_DARTANALYZER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "DART_DARTANALYZER_FILE_NAME": {
      "$id": "#/properties/DART_DARTANALYZER_FILE_NAME",
      "default": "analysis_options.yml",
      "description": "DART_DARTANALYZER: User custom config file name if different from default",
      "title": "DART_DARTANALYZER: Custom config file name",
      "type": "string"
    },
    "DART_DARTANALYZER_FILE_NAMES_REGEX": {
      "$id": "#/properties/DART_DARTANALYZER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "DART_DARTANALYZER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "DART_DARTANALYZER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/DART_DARTANALYZER_FILTER_REGEX_EXCLUDE",
      "title": "DART_DARTANALYZER: Excluding Regex",
      "type": "string"
    },
    "DART_DARTANALYZER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/DART_DARTANALYZER_FILTER_REGEX_INCLUDE",
      "title": "DART_DARTANALYZER: Including Regex",
      "type": "string"
    },
    "DART_DARTANALYZER_RULES_PATH": {
      "$id": "#/properties/DART_DARTANALYZER_RULES_PATH",
      "description": "DART_DARTANALYZER: Path where to find linter configuration file",
      "title": "DART_DARTANALYZER: Custom config file path",
      "type": "string"
    },
    "DART_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/DART_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for DART descriptor",
      "type": "string"
    },
    "DART_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/DART_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for DART descriptor",
      "type": "string"
    },
    "DEFAULT_BRANCH": {
      "$id": "#/properties/DEFAULT_BRANCH",
      "default": "master",
      "description": "The name of the repository default branch. Warning: In new github repositories, master branch is named main, so you need to override this value with main",
      "examples": [
        "master",
        "main"
      ],
      "title": "Default git branch",
      "type": "string"
    },
    "DEFAULT_WORKSPACE": {
      "$id": "#/properties/DEFAULT_WORKSPACE",
      "default": "/tmp/lint",
      "description": "The location containing files to lint if you are running as docker image",
      "title": "Default Workspace",
      "type": "string"
    },
    "DISABLE": {
      "$id": "#/properties/DISABLE",
      "description": "If DISABLE is set, the linters in the listed descriptors will be skipped",
      "examples": [
        [
          "BASH",
          "HTML"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_descriptor_keys"
      },
      "title": "Disabled descriptor keys",
      "type": "array"
    },
    "DISABLE_ERRORS": {
      "$id": "#/properties/DISABLE_ERRORS",
      "default": false,
      "description": "Flag to have the Mega-Linter complete with exit code 0 even if errors were detected.",
      "title": "Disable errors",
      "type": "boolean"
    },
    "DISABLE_LINTERS": {
      "$id": "#/properties/DISABLE_LINTERS",
      "description": "If DISABLE_LINTERS is set, the listed linters will be skipped",
      "examples": [
        [
          "BASH_BASH_SHFMT",
          "JAVASCRIPT_STANDARD"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_linter_keys"
      },
      "title": "Disabled linter keys",
      "type": "array"
    },
    "DOCKERFILE_DOCKERFILELINT_ARGUMENTS": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_ARGUMENTS",
      "description": "DOCKERFILE_DOCKERFILELINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_DOCKERFILELINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "DOCKERFILE_DOCKERFILELINT_CONFIG_FILE": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_CONFIG_FILE",
      "default": ".dockerfilelintrc",
      "description": "DOCKERFILE_DOCKERFILELINT: User custom config file name if different from default",
      "title": "DOCKERFILE_DOCKERFILELINT: Custom config file name",
      "type": "string"
    },
    "DOCKERFILE_DOCKERFILELINT_DISABLE_ERRORS": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_DISABLE_ERRORS",
      "default": false,
      "title": "DOCKERFILE_DOCKERFILELINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "DOCKERFILE_DOCKERFILELINT_FILE_EXTENSIONS": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_DOCKERFILELINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "DOCKERFILE_DOCKERFILELINT_FILE_NAME": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_FILE_NAME",
      "default": ".dockerfilelintrc",
      "description": "DOCKERFILE_DOCKERFILELINT: User custom config file name if different from default",
      "title": "DOCKERFILE_DOCKERFILELINT: Custom config file name",
      "type": "string"
    },
    "DOCKERFILE_DOCKERFILELINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_DOCKERFILELINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_EXCLUDE",
      "title": "DOCKERFILE_DOCKERFILELINT: Excluding Regex",
      "type": "string"
    },
    "DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_FILTER_REGEX_INCLUDE",
      "title": "DOCKERFILE_DOCKERFILELINT: Including Regex",
      "type": "string"
    },
    "DOCKERFILE_DOCKERFILELINT_RULES_PATH": {
      "$id": "#/properties/DOCKERFILE_DOCKERFILELINT_RULES_PATH",
      "description": "DOCKERFILE_DOCKERFILELINT: Path where to find linter configuration file",
      "title": "DOCKERFILE_DOCKERFILELINT: Custom config file path",
      "type": "string"
    },
    "DOCKERFILE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/DOCKERFILE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for DOCKERFILE descriptor",
      "type": "string"
    },
    "DOCKERFILE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/DOCKERFILE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for DOCKERFILE descriptor",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_ARGUMENTS": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_ARGUMENTS",
      "description": "DOCKERFILE_HADOLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_HADOLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "DOCKERFILE_HADOLINT_CONFIG_FILE": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_CONFIG_FILE",
      "default": ".hadolint.yml",
      "description": "DOCKERFILE_HADOLINT: User custom config file name if different from default",
      "title": "DOCKERFILE_HADOLINT: Custom config file name",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_DISABLE_ERRORS": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_DISABLE_ERRORS",
      "default": false,
      "title": "DOCKERFILE_HADOLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "DOCKERFILE_HADOLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_HADOLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "DOCKERFILE_HADOLINT_FILE_NAME": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_FILE_NAME",
      "default": ".hadolint.yml",
      "description": "DOCKERFILE_HADOLINT: User custom config file name if different from default",
      "title": "DOCKERFILE_HADOLINT: Custom config file name",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "DOCKERFILE_HADOLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "DOCKERFILE_HADOLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_FILTER_REGEX_EXCLUDE",
      "title": "DOCKERFILE_HADOLINT: Excluding Regex",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_FILTER_REGEX_INCLUDE",
      "title": "DOCKERFILE_HADOLINT: Including Regex",
      "type": "string"
    },
    "DOCKERFILE_HADOLINT_RULES_PATH": {
      "$id": "#/properties/DOCKERFILE_HADOLINT_RULES_PATH",
      "description": "DOCKERFILE_HADOLINT: Path where to find linter configuration file",
      "title": "DOCKERFILE_HADOLINT: Custom config file path",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_ARGUMENTS": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_ARGUMENTS",
      "description": "EDITORCONFIG_EDITORCONFIG_CHECKER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_CONFIG_FILE": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_CONFIG_FILE",
      "default": ".ecrc",
      "description": "EDITORCONFIG_EDITORCONFIG_CHECKER: User custom config file name if different from default",
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Custom config file name",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS",
      "default": false,
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_EXTENSIONS": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAME": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAME",
      "default": ".ecrc",
      "description": "EDITORCONFIG_EDITORCONFIG_CHECKER: User custom config file name if different from default",
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Custom config file name",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAMES_REGEX": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_EXCLUDE",
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Excluding Regex",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_INCLUDE",
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Including Regex",
      "type": "string"
    },
    "EDITORCONFIG_EDITORCONFIG_CHECKER_RULES_PATH": {
      "$id": "#/properties/EDITORCONFIG_EDITORCONFIG_CHECKER_RULES_PATH",
      "description": "EDITORCONFIG_EDITORCONFIG_CHECKER: Path where to find linter configuration file",
      "title": "EDITORCONFIG_EDITORCONFIG_CHECKER: Custom config file path",
      "type": "string"
    },
    "EDITORCONFIG_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/EDITORCONFIG_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for EDITORCONFIG descriptor",
      "type": "string"
    },
    "EDITORCONFIG_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/EDITORCONFIG_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for EDITORCONFIG descriptor",
      "type": "string"
    },
    "EMAIL_REPORTER": {
      "$id": "#/properties/EMAIL_REPORTER",
      "default": true,
      "description": "Mega-Linter can send email with reports to given addresses. Please set EMAIL_REPORTER_** variables if activated",
      "title": "Activate Email reporter",
      "type": "boolean"
    },
    "EMAIL_REPORTER_EMAIL": {
      "$id": "#/properties/EMAIL_REPORTER_EMAIL",
      "description": "Comma-separated list of recipient emails, that will receive reports",
      "title": "Email reporter: E-mail addresses",
      "type": "string"
    },
    "EMAIL_REPORTER_SENDER": {
      "$id": "#/properties/EMAIL_REPORTER_SENDER",
      "default": "megalinter@gmail.com",
      "title": "Email reporter: Sender of emails",
      "type": "string"
    },
    "EMAIL_REPORTER_SEND_SUCCESS": {
      "$id": "#/properties/EMAIL_REPORTER_SEND_SUCCESS",
      "default": false,
      "description": "Define to true if you want to receive reports by mail even when there is no errors or updated sources",
      "title": "Send email reports even when success",
      "type": "boolean"
    },
    "EMAIL_REPORTER_SMTP_HOST": {
      "$id": "#/properties/EMAIL_REPORTER_SMTP_HOST",
      "default": "smtp.gmail.com",
      "title": "Email reporter: SMTP server host",
      "type": "string"
    },
    "EMAIL_REPORTER_SMTP_PASSWORD": {
      "$id": "#/properties/EMAIL_REPORTER_SMTP_PASSWORD",
      "title": "Email reporter: SMTP server password. Never hardcode it in a config variable, use secrets and context variables",
      "type": "string"
    },
    "EMAIL_REPORTER_SMTP_PORT": {
      "$id": "#/properties/EMAIL_REPORTER_SMTP_PORT",
      "default": "465",
      "title": "Email reporter: SMTP server port",
      "type": "number"
    },
    "EMAIL_REPORTER_SMTP_USERNAME": {
      "$id": "#/properties/EMAIL_REPORTER_SMTP_USERNAME",
      "default": "megalinter@gmail.com",
      "title": "Email reporter: SMTP username",
      "type": "string"
    },
    "ENABLE": {
      "$id": "#/properties/ENABLE",
      "description": "If ENABLE is not set, all descriptors are activated by default. If set, all linters of listed descriptors will be activated by default",
      "examples": [
        [
          "BASH",
          "HTML",
          "JAVASCRIPT"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_descriptor_keys"
      },
      "title": "Enabled descriptor keys",
      "type": "array"
    },
    "ENABLE_LINTERS": {
      "$id": "#/properties/ENABLE_LINTERS",
      "description": "If ENABLE_LINTERS is set, only listed linters will be processed",
      "examples": [
        [
          "JAVASCRIPT_ES",
          "PYTHON_PYLINT"
        ]
      ],
      "items": {
        "$ref": "#/definitions/enum_linter_keys"
      },
      "title": "Enabled linter keys",
      "type": "array"
    },
    "ENV_DOTENV_LINTER_ARGUMENTS": {
      "$id": "#/properties/ENV_DOTENV_LINTER_ARGUMENTS",
      "description": "ENV_DOTENV_LINTER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "ENV_DOTENV_LINTER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "ENV_DOTENV_LINTER_DISABLE_ERRORS": {
      "$id": "#/properties/ENV_DOTENV_LINTER_DISABLE_ERRORS",
      "default": false,
      "title": "ENV_DOTENV_LINTER: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "ENV_DOTENV_LINTER_FILE_EXTENSIONS": {
      "$id": "#/properties/ENV_DOTENV_LINTER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "ENV_DOTENV_LINTER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "ENV_DOTENV_LINTER_FILE_NAMES_REGEX": {
      "$id": "#/properties/ENV_DOTENV_LINTER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "ENV_DOTENV_LINTER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "ENV_DOTENV_LINTER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ENV_DOTENV_LINTER_FILTER_REGEX_EXCLUDE",
      "title": "ENV_DOTENV_LINTER: Excluding Regex",
      "type": "string"
    },
    "ENV_DOTENV_LINTER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ENV_DOTENV_LINTER_FILTER_REGEX_INCLUDE",
      "title": "ENV_DOTENV_LINTER: Including Regex",
      "type": "string"
    },
    "ENV_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/ENV_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for ENV descriptor",
      "type": "string"
    },
    "ENV_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/ENV_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for ENV descriptor",
      "type": "string"
    },
    "EXCLUDED_DIRECTORIES": {
      "$id": "#/properties/EXCLUDED_DIRECTORIES",
      "description": "List of excluded directory basenames replacing Mega-Linter default excluded directories. They are excluded at any nested level.",
      "examples": [
        [
          ".github",
          "node_modules"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Excluded directories",
      "type": "array"
    },
    "FILEIO_REPORTER": {
      "$id": "#/properties/FILEIO_REPORTER",
      "default": false,
      "description": "If you don't use artifacts upload to read Mega-Linter reports, you can access them with an hyperlink to file.io. Important: Mega-Linter has no affiliation with file.io, but it's supposed to be secured, and only one download is available for a report (snapchat for files, basically)",
      "title": "Activate File.io reporter",
      "type": "boolean"
    },
    "FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/FILTER_REGEX_EXCLUDE",
      "description": "Regular expression defining which files will be excluded from linting",
      "examples": [
        "(\\.automation/test|docs/javascripts|docs/overrides|flavors|clj-kondo|TEMPLATES)",
        "(src/test)"
      ],
      "title": "Excluding regex filter",
      "type": "string"
    },
    "FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/FILTER_REGEX_INCLUDE",
      "description": "Regular expression defining which files will be processed by linters",
      "examples": [
        "(src/)"
      ],
      "title": "Including regex filter",
      "type": "string"
    },
    "FLAVOR_SUGGESTIONS": {
      "$id": "#/properties/FLAVOR_SUGGESTIONS",
      "default": true,
      "description": "Provides suggestions about different Mega-Linter flavors to use to improve runtime performances",
      "title": "Flavor suggestions",
      "type": "boolean"
    },
    "GHERKIN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GHERKIN_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for GHERKIN descriptor",
      "type": "string"
    },
    "GHERKIN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GHERKIN_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for GHERKIN descriptor",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_ARGUMENTS": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_ARGUMENTS",
      "description": "GHERKIN_GHERKIN_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GHERKIN_GHERKIN_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GHERKIN_GHERKIN_LINT_CONFIG_FILE": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_CONFIG_FILE",
      "default": ".gherkin-lintrc",
      "description": "GHERKIN_GHERKIN_LINT: User custom config file name if different from default",
      "title": "GHERKIN_GHERKIN_LINT: Custom config file name",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "GHERKIN_GHERKIN_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "GHERKIN_GHERKIN_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "GHERKIN_GHERKIN_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GHERKIN_GHERKIN_LINT_FILE_NAME": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_FILE_NAME",
      "default": ".gherkin-lintrc",
      "description": "GHERKIN_GHERKIN_LINT: User custom config file name if different from default",
      "title": "GHERKIN_GHERKIN_LINT: Custom config file name",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "GHERKIN_GHERKIN_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GHERKIN_GHERKIN_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_FILTER_REGEX_EXCLUDE",
      "title": "GHERKIN_GHERKIN_LINT: Excluding Regex",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE",
      "title": "GHERKIN_GHERKIN_LINT: Including Regex",
      "type": "string"
    },
    "GHERKIN_GHERKIN_LINT_RULES_PATH": {
      "$id": "#/properties/GHERKIN_GHERKIN_LINT_RULES_PATH",
      "description": "GHERKIN_GHERKIN_LINT: Path where to find linter configuration file",
      "title": "GHERKIN_GHERKIN_LINT: Custom config file path",
      "type": "string"
    },
    "GITHUB_API_URL": {
      "$id": "#/properties/GITHUB_API_URL",
      "default": "https://api.github.com",
      "description": "URL where the github API can be reached. Must be overridden if using GitHub Enterprise",
      "examples": [
        "https://github.my-company.com/api/v3"
      ],
      "format": "uri",
      "title": "GitHub API base URL",
      "type": "string"
    },
    "GITHUB_COMMENT_REPORTER": {
      "$id": "#/properties/GITHUB_COMMENT_REPORTER",
      "default": true,
      "description": "Posts Mega-Linter results summary in the comments of the related pull request (if existing)",
      "title": "Activate GitHub PR Comments reporter",
      "type": "boolean"
    },
    "GITHUB_SERVER_URL": {
      "$id": "#/properties/GITHUB_SERVER_URL",
      "default": "https://github.com",
      "description": "URL of the GitHub instance. Must be overridden if using GitHub Enterprise",
      "examples": [
        "https://github.my-company.com/"
      ],
      "format": "uri",
      "title": "GitHub server base URL",
      "type": "string"
    },
    "GITHUB_STATUS_REPORTER": {
      "$id": "#/properties/GITHUB_STATUS_REPORTER",
      "default": true,
      "description": "Posts a status on the pull request for each processed linter",
      "title": "Activate GitHub Status reporter",
      "type": "boolean"
    },
    "GITHUB_WORKSPACE": {
      "$id": "#/properties/GITHUB_WORKSPACE",
      "default": "/tmp/lint",
      "description": "Base directory for REPORT_OUTPUT_FOLDER, for user-defined linter rules location, for location of linted files if DEFAULT_WORKSPACE is not set",
      "title": "GitHub Workspace",
      "type": "string"
    },
    "GIT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GIT_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for GIT descriptor",
      "type": "string"
    },
    "GIT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GIT_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for GIT descriptor",
      "type": "string"
    },
    "GIT_GIT_DIFF_ARGUMENTS": {
      "$id": "#/properties/GIT_GIT_DIFF_ARGUMENTS",
      "description": "GIT_GIT_DIFF: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GIT_GIT_DIFF: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GIT_GIT_DIFF_DISABLE_ERRORS": {
      "$id": "#/properties/GIT_GIT_DIFF_DISABLE_ERRORS",
      "default": false,
      "title": "GIT_GIT_DIFF: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "GIT_GIT_DIFF_FILE_EXTENSIONS": {
      "$id": "#/properties/GIT_GIT_DIFF_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "GIT_GIT_DIFF: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GIT_GIT_DIFF_FILE_NAMES_REGEX": {
      "$id": "#/properties/GIT_GIT_DIFF_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "GIT_GIT_DIFF: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GIT_GIT_DIFF_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GIT_GIT_DIFF_FILTER_REGEX_EXCLUDE",
      "title": "GIT_GIT_DIFF: Excluding Regex",
      "type": "string"
    },
    "GIT_GIT_DIFF_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GIT_GIT_DIFF_FILTER_REGEX_INCLUDE",
      "title": "GIT_GIT_DIFF: Including Regex",
      "type": "string"
    },
    "GO_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GO_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for GO descriptor",
      "type": "string"
    },
    "GO_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GO_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for GO descriptor",
      "type": "string"
    },
    "GO_GOLANGCI_LINT_ARGUMENTS": {
      "$id": "#/properties/GO_GOLANGCI_LINT_ARGUMENTS",
      "description": "GO_GOLANGCI_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_GOLANGCI_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GO_GOLANGCI_LINT_CONFIG_FILE": {
      "$id": "#/properties/GO_GOLANGCI_LINT_CONFIG_FILE",
      "default": ".golangci.yml",
      "description": "GO_GOLANGCI_LINT: User custom config file name if different from default",
      "title": "GO_GOLANGCI_LINT: Custom config file name",
      "type": "string"
    },
    "GO_GOLANGCI_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/GO_GOLANGCI_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "GO_GOLANGCI_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "GO_GOLANGCI_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/GO_GOLANGCI_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_GOLANGCI_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GO_GOLANGCI_LINT_FILE_NAME": {
      "$id": "#/properties/GO_GOLANGCI_LINT_FILE_NAME",
      "default": ".golangci.yml",
      "description": "GO_GOLANGCI_LINT: User custom config file name if different from default",
      "title": "GO_GOLANGCI_LINT: Custom config file name",
      "type": "string"
    },
    "GO_GOLANGCI_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/GO_GOLANGCI_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "GO_GOLANGCI_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GO_GOLANGCI_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GO_GOLANGCI_LINT_FILTER_REGEX_EXCLUDE",
      "title": "GO_GOLANGCI_LINT: Excluding Regex",
      "type": "string"
    },
    "GO_GOLANGCI_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GO_GOLANGCI_LINT_FILTER_REGEX_INCLUDE",
      "title": "GO_GOLANGCI_LINT: Including Regex",
      "type": "string"
    },
    "GO_GOLANGCI_LINT_RULES_PATH": {
      "$id": "#/properties/GO_GOLANGCI_LINT_RULES_PATH",
      "description": "GO_GOLANGCI_LINT: Path where to find linter configuration file",
      "title": "GO_GOLANGCI_LINT: Custom config file path",
      "type": "string"
    },
    "GRAPHQL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GRAPHQL_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for GRAPHQL descriptor",
      "type": "string"
    },
    "GRAPHQL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GRAPHQL_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for GRAPHQL descriptor",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_ARGUMENTS": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_ARGUMENTS",
      "description": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_CONFIG_FILE": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_CONFIG_FILE",
      "default": ".graphql-schema-linterrc",
      "description": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: User custom config file name if different from default",
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Custom config file name",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS",
      "default": false,
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_EXTENSIONS": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAME": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAME",
      "default": ".graphql-schema-linterrc",
      "description": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: User custom config file name if different from default",
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Custom config file name",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAMES_REGEX": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_EXCLUDE",
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Excluding Regex",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_INCLUDE",
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Including Regex",
      "type": "string"
    },
    "GRAPHQL_GRAPHQL_SCHEMA_LINTER_RULES_PATH": {
      "$id": "#/properties/GRAPHQL_GRAPHQL_SCHEMA_LINTER_RULES_PATH",
      "description": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Path where to find linter configuration file",
      "title": "GRAPHQL_GRAPHQL_SCHEMA_LINTER: Custom config file path",
      "type": "string"
    },
    "GROOVY_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GROOVY_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for GROOVY descriptor",
      "type": "string"
    },
    "GROOVY_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GROOVY_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for GROOVY descriptor",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_ARGUMENTS": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_ARGUMENTS",
      "description": "GROOVY_NPM_GROOVY_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "GROOVY_NPM_GROOVY_LINT_CONFIG_FILE": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_CONFIG_FILE",
      "default": ".groovylintrc.json",
      "description": "GROOVY_NPM_GROOVY_LINT: User custom config file name if different from default",
      "title": "GROOVY_NPM_GROOVY_LINT: Custom config file name",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "GROOVY_NPM_GROOVY_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "GROOVY_NPM_GROOVY_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "GROOVY_NPM_GROOVY_LINT_FILE_NAME": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_FILE_NAME",
      "default": ".groovylintrc.json",
      "description": "GROOVY_NPM_GROOVY_LINT: User custom config file name if different from default",
      "title": "GROOVY_NPM_GROOVY_LINT: Custom config file name",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "GROOVY_NPM_GROOVY_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_EXCLUDE",
      "title": "GROOVY_NPM_GROOVY_LINT: Excluding Regex",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_INCLUDE",
      "title": "GROOVY_NPM_GROOVY_LINT: Including Regex",
      "type": "string"
    },
    "GROOVY_NPM_GROOVY_LINT_RULES_PATH": {
      "$id": "#/properties/GROOVY_NPM_GROOVY_LINT_RULES_PATH",
      "description": "GROOVY_NPM_GROOVY_LINT: Path where to find linter configuration file",
      "title": "GROOVY_NPM_GROOVY_LINT: Custom config file path",
      "type": "string"
    },
    "HTML_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/HTML_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for HTML descriptor",
      "type": "string"
    },
    "HTML_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/HTML_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for HTML descriptor",
      "type": "string"
    },
    "HTML_HTMLHINT_ARGUMENTS": {
      "$id": "#/properties/HTML_HTMLHINT_ARGUMENTS",
      "description": "HTML_HTMLHINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_HTMLHINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "HTML_HTMLHINT_CONFIG_FILE": {
      "$id": "#/properties/HTML_HTMLHINT_CONFIG_FILE",
      "default": ".htmlhintrc",
      "description": "HTML_HTMLHINT: User custom config file name if different from default",
      "title": "HTML_HTMLHINT: Custom config file name",
      "type": "string"
    },
    "HTML_HTMLHINT_DISABLE_ERRORS": {
      "$id": "#/properties/HTML_HTMLHINT_DISABLE_ERRORS",
      "default": false,
      "title": "HTML_HTMLHINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "HTML_HTMLHINT_FILE_EXTENSIONS": {
      "$id": "#/properties/HTML_HTMLHINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_HTMLHINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "HTML_HTMLHINT_FILE_NAME": {
      "$id": "#/properties/HTML_HTMLHINT_FILE_NAME",
      "default": ".htmlhintrc",
      "description": "HTML_HTMLHINT: User custom config file name if different from default",
      "title": "HTML_HTMLHINT: Custom config file name",
      "type": "string"
    },
    "HTML_HTMLHINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/HTML_HTMLHINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "HTML_HTMLHINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "HTML_HTMLHINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/HTML_HTMLHINT_FILTER_REGEX_EXCLUDE",
      "title": "HTML_HTMLHINT: Excluding Regex",
      "type": "string"
    },
    "HTML_HTMLHINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/HTML_HTMLHINT_FILTER_REGEX_INCLUDE",
      "title": "HTML_HTMLHINT: Including Regex",
      "type": "string"
    },
    "HTML_HTMLHINT_RULES_PATH": {
      "$id": "#/properties/HTML_HTMLHINT_RULES_PATH",
      "description": "HTML_HTMLHINT: Path where to find linter configuration file",
      "title": "HTML_HTMLHINT: Custom config file path",
      "type": "string"
    },
    "JAVASCRIPT_DEFAULT_STYLE": {
      "$id": "#/properties/JAVASCRIPT_DEFAULT_STYLE",
      "description": "Style of javascript formatting to apply",
      "enum": [
        "standard",
        "prettier"
      ],
      "examples": [
        "standard",
        "prettier"
      ],
      "title": "Javascript default style",
      "type": "string"
    },
    "JAVASCRIPT_ES_ARGUMENTS": {
      "$id": "#/properties/JAVASCRIPT_ES_ARGUMENTS",
      "description": "JAVASCRIPT_ES: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_ES: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVASCRIPT_ES_CONFIG_FILE": {
      "$id": "#/properties/JAVASCRIPT_ES_CONFIG_FILE",
      "default": ".eslintrc.json",
      "description": "JAVASCRIPT_ES: User custom config file name if different from default",
      "title": "JAVASCRIPT_ES: Custom config file name",
      "type": "string"
    },
    "JAVASCRIPT_ES_DISABLE_ERRORS": {
      "$id": "#/properties/JAVASCRIPT_ES_DISABLE_ERRORS",
      "default": false,
      "title": "JAVASCRIPT_ES: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "JAVASCRIPT_ES_FILE_EXTENSIONS": {
      "$id": "#/properties/JAVASCRIPT_ES_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_ES: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JAVASCRIPT_ES_FILE_NAME": {
      "$id": "#/properties/JAVASCRIPT_ES_FILE_NAME",
      "default": ".eslintrc.json",
      "description": "JAVASCRIPT_ES: User custom config file name if different from default",
      "title": "JAVASCRIPT_ES: Custom config file name",
      "type": "string"
    },
    "JAVASCRIPT_ES_FILE_NAMES_REGEX": {
      "$id": "#/properties/JAVASCRIPT_ES_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_ES: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JAVASCRIPT_ES_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVASCRIPT_ES_FILTER_REGEX_EXCLUDE",
      "title": "JAVASCRIPT_ES: Excluding Regex",
      "type": "string"
    },
    "JAVASCRIPT_ES_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVASCRIPT_ES_FILTER_REGEX_INCLUDE",
      "title": "JAVASCRIPT_ES: Including Regex",
      "type": "string"
    },
    "JAVASCRIPT_ES_RULES_PATH": {
      "$id": "#/properties/JAVASCRIPT_ES_RULES_PATH",
      "description": "JAVASCRIPT_ES: Path where to find linter configuration file",
      "title": "JAVASCRIPT_ES: Custom config file path",
      "type": "string"
    },
    "JAVASCRIPT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVASCRIPT_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for JAVASCRIPT descriptor",
      "type": "string"
    },
    "JAVASCRIPT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVASCRIPT_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for JAVASCRIPT descriptor",
      "type": "string"
    },
    "JAVASCRIPT_PRETTIER_ARGUMENTS": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_ARGUMENTS",
      "description": "JAVASCRIPT_PRETTIER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_PRETTIER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVASCRIPT_PRETTIER_CONFIG_FILE": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_CONFIG_FILE",
      "default": ".prettierrc.json",
      "description": "JAVASCRIPT_PRETTIER: User custom config file name if different from default",
      "title": "JAVASCRIPT_PRETTIER: Custom config file name",
      "type": "string"
    },
    "JAVASCRIPT_PRETTIER_DISABLE_ERRORS": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_DISABLE_ERRORS",
      "default": false,
      "title": "JAVASCRIPT_PRETTIER: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "JAVASCRIPT_PRETTIER_FILE_EXTENSIONS": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_PRETTIER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JAVASCRIPT_PRETTIER_FILE_NAMES_REGEX": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_PRETTIER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JAVASCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE",
      "title": "JAVASCRIPT_PRETTIER: Excluding Regex",
      "type": "string"
    },
    "JAVASCRIPT_PRETTIER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_FILTER_REGEX_INCLUDE",
      "title": "JAVASCRIPT_PRETTIER: Including Regex",
      "type": "string"
    },
    "JAVASCRIPT_PRETTIER_RULES_PATH": {
      "$id": "#/properties/JAVASCRIPT_PRETTIER_RULES_PATH",
      "description": "JAVASCRIPT_PRETTIER: Path where to find linter configuration file",
      "title": "JAVASCRIPT_PRETTIER: Custom config file path",
      "type": "string"
    },
    "JAVASCRIPT_STANDARD_ARGUMENTS": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_ARGUMENTS",
      "description": "JAVASCRIPT_STANDARD: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_STANDARD: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVASCRIPT_STANDARD_DISABLE_ERRORS": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_DISABLE_ERRORS",
      "default": false,
      "title": "JAVASCRIPT_STANDARD: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "JAVASCRIPT_STANDARD_FILE_EXTENSIONS": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_STANDARD: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JAVASCRIPT_STANDARD_FILE_NAMES_REGEX": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVASCRIPT_STANDARD: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JAVASCRIPT_STANDARD_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_FILTER_REGEX_EXCLUDE",
      "title": "JAVASCRIPT_STANDARD: Excluding Regex",
      "type": "string"
    },
    "JAVASCRIPT_STANDARD_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVASCRIPT_STANDARD_FILTER_REGEX_INCLUDE",
      "title": "JAVASCRIPT_STANDARD: Including Regex",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_ARGUMENTS": {
      "$id": "#/properties/JAVA_CHECKSTYLE_ARGUMENTS",
      "description": "JAVA_CHECKSTYLE: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_CHECKSTYLE: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JAVA_CHECKSTYLE_CONFIG_FILE": {
      "$id": "#/properties/JAVA_CHECKSTYLE_CONFIG_FILE",
      "default": "sun_checks.xml",
      "description": "JAVA_CHECKSTYLE: User custom config file name if different from default",
      "title": "JAVA_CHECKSTYLE: Custom config file name",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_DISABLE_ERRORS": {
      "$id": "#/properties/JAVA_CHECKSTYLE_DISABLE_ERRORS",
      "default": false,
      "title": "JAVA_CHECKSTYLE: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "JAVA_CHECKSTYLE_FILE_EXTENSIONS": {
      "$id": "#/properties/JAVA_CHECKSTYLE_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_CHECKSTYLE: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JAVA_CHECKSTYLE_FILE_NAME": {
      "$id": "#/properties/JAVA_CHECKSTYLE_FILE_NAME",
      "default": "sun_checks.xml",
      "description": "JAVA_CHECKSTYLE: User custom config file name if different from default",
      "title": "JAVA_CHECKSTYLE: Custom config file name",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_FILE_NAMES_REGEX": {
      "$id": "#/properties/JAVA_CHECKSTYLE_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JAVA_CHECKSTYLE: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JAVA_CHECKSTYLE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVA_CHECKSTYLE_FILTER_REGEX_EXCLUDE",
      "title": "JAVA_CHECKSTYLE: Excluding Regex",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVA_CHECKSTYLE_FILTER_REGEX_INCLUDE",
      "title": "JAVA_CHECKSTYLE: Including Regex",
      "type": "string"
    },
    "JAVA_CHECKSTYLE_RULES_PATH": {
      "$id": "#/properties/JAVA_CHECKSTYLE_RULES_PATH",
      "description": "JAVA_CHECKSTYLE: Path where to find linter configuration file",
      "title": "JAVA_CHECKSTYLE: Custom config file path",
      "type": "string"
    },
    "JAVA_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JAVA_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for JAVA descriptor",
      "type": "string"
    },
    "JAVA_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JAVA_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for JAVA descriptor",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_ARGUMENTS": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_ARGUMENTS",
      "description": "JSON_ESLINT_PLUGIN_JSONC: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_ESLINT_PLUGIN_JSONC_CONFIG_FILE": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_CONFIG_FILE",
      "default": ".eslintrc-json.json",
      "description": "JSON_ESLINT_PLUGIN_JSONC: User custom config file name if different from default",
      "title": "JSON_ESLINT_PLUGIN_JSONC: Custom config file name",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS",
      "default": false,
      "title": "JSON_ESLINT_PLUGIN_JSONC: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "JSON_ESLINT_PLUGIN_JSONC_FILE_EXTENSIONS": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JSON_ESLINT_PLUGIN_JSONC_FILE_NAME": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_FILE_NAME",
      "default": ".eslintrc.json",
      "description": "JSON_ESLINT_PLUGIN_JSONC: User custom config file name if different from default",
      "title": "JSON_ESLINT_PLUGIN_JSONC: Custom config file name",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_FILE_NAMES_REGEX": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_ESLINT_PLUGIN_JSONC: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_EXCLUDE",
      "title": "JSON_ESLINT_PLUGIN_JSONC: Excluding Regex",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_INCLUDE",
      "title": "JSON_ESLINT_PLUGIN_JSONC: Including Regex",
      "type": "string"
    },
    "JSON_ESLINT_PLUGIN_JSONC_RULES_PATH": {
      "$id": "#/properties/JSON_ESLINT_PLUGIN_JSONC_RULES_PATH",
      "description": "JSON_ESLINT_PLUGIN_JSONC: Path where to find linter configuration file",
      "title": "JSON_ESLINT_PLUGIN_JSONC: Custom config file path",
      "type": "string"
    },
    "JSON_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSON_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for JSON descriptor",
      "type": "string"
    },
    "JSON_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSON_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for JSON descriptor",
      "type": "string"
    },
    "JSON_JSONLINT_ARGUMENTS": {
      "$id": "#/properties/JSON_JSONLINT_ARGUMENTS",
      "description": "JSON_JSONLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_JSONLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_JSONLINT_DISABLE_ERRORS": {
      "$id": "#/properties/JSON_JSONLINT_DISABLE_ERRORS",
      "default": false,
      "title": "JSON_JSONLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "JSON_JSONLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/JSON_JSONLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_JSONLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JSON_JSONLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/JSON_JSONLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_JSONLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JSON_JSONLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSON_JSONLINT_FILTER_REGEX_EXCLUDE",
      "title": "JSON_JSONLINT: Excluding Regex",
      "type": "string"
    },
    "JSON_JSONLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSON_JSONLINT_FILTER_REGEX_INCLUDE",
      "title": "JSON_JSONLINT: Including Regex",
      "type": "string"
    },
    "JSON_V8R_ARGUMENTS": {
      "$id": "#/properties/JSON_V8R_ARGUMENTS",
      "description": "JSON_V8R: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_V8R: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSON_V8R_DISABLE_ERRORS": {
      "$id": "#/properties/JSON_V8R_DISABLE_ERRORS",
      "default": false,
      "title": "JSON_V8R: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "JSON_V8R_FILE_EXTENSIONS": {
      "$id": "#/properties/JSON_V8R_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_V8R: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JSON_V8R_FILE_NAMES_REGEX": {
      "$id": "#/properties/JSON_V8R_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSON_V8R: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JSON_V8R_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSON_V8R_FILTER_REGEX_EXCLUDE",
      "title": "JSON_V8R: Excluding Regex",
      "type": "string"
    },
    "JSON_V8R_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSON_V8R_FILTER_REGEX_INCLUDE",
      "title": "JSON_V8R: Including Regex",
      "type": "string"
    },
    "JSX_ESLINT_ARGUMENTS": {
      "$id": "#/properties/JSX_ESLINT_ARGUMENTS",
      "description": "JSX_ESLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSX_ESLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "JSX_ESLINT_CONFIG_FILE": {
      "$id": "#/properties/JSX_ESLINT_CONFIG_FILE",
      "default": ".eslintrc.json",
      "description": "JSX_ESLINT: User custom config file name if different from default",
      "title": "JSX_ESLINT: Custom config file name",
      "type": "string"
    },
    "JSX_ESLINT_DISABLE_ERRORS": {
      "$id": "#/properties/JSX_ESLINT_DISABLE_ERRORS",
      "default": false,
      "title": "JSX_ESLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "JSX_ESLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/JSX_ESLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSX_ESLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "JSX_ESLINT_FILE_NAME": {
      "$id": "#/properties/JSX_ESLINT_FILE_NAME",
      "default": ".eslintrc.json",
      "description": "JSX_ESLINT: User custom config file name if different from default",
      "title": "JSX_ESLINT: Custom config file name",
      "type": "string"
    },
    "JSX_ESLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/JSX_ESLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "JSX_ESLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "JSX_ESLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSX_ESLINT_FILTER_REGEX_EXCLUDE",
      "title": "JSX_ESLINT: Excluding Regex",
      "type": "string"
    },
    "JSX_ESLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSX_ESLINT_FILTER_REGEX_INCLUDE",
      "title": "JSX_ESLINT: Including Regex",
      "type": "string"
    },
    "JSX_ESLINT_RULES_PATH": {
      "$id": "#/properties/JSX_ESLINT_RULES_PATH",
      "description": "JSX_ESLINT: Path where to find linter configuration file",
      "title": "JSX_ESLINT: Custom config file path",
      "type": "string"
    },
    "JSX_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/JSX_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for JSX descriptor",
      "type": "string"
    },
    "JSX_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/JSX_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for JSX descriptor",
      "type": "string"
    },
    "KOTLIN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/KOTLIN_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for KOTLIN descriptor",
      "type": "string"
    },
    "KOTLIN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/KOTLIN_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for KOTLIN descriptor",
      "type": "string"
    },
    "KOTLIN_KTLINT_ARGUMENTS": {
      "$id": "#/properties/KOTLIN_KTLINT_ARGUMENTS",
      "description": "KOTLIN_KTLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_KTLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KOTLIN_KTLINT_DISABLE_ERRORS": {
      "$id": "#/properties/KOTLIN_KTLINT_DISABLE_ERRORS",
      "default": false,
      "title": "KOTLIN_KTLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "KOTLIN_KTLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/KOTLIN_KTLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_KTLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "KOTLIN_KTLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/KOTLIN_KTLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "KOTLIN_KTLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "KOTLIN_KTLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/KOTLIN_KTLINT_FILTER_REGEX_EXCLUDE",
      "title": "KOTLIN_KTLINT: Excluding Regex",
      "type": "string"
    },
    "KOTLIN_KTLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/KOTLIN_KTLINT_FILTER_REGEX_INCLUDE",
      "title": "KOTLIN_KTLINT: Including Regex",
      "type": "string"
    },
    "KUBERNETES_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/KUBERNETES_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for KUBERNETES descriptor",
      "type": "string"
    },
    "KUBERNETES_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/KUBERNETES_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for KUBERNETES descriptor",
      "type": "string"
    },
    "KUBERNETES_KUBEVAL_ARGUMENTS": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_ARGUMENTS",
      "description": "KUBERNETES_KUBEVAL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBEVAL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "KUBERNETES_KUBEVAL_DIRECTORY": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_DIRECTORY",
      "default": "kubernetes",
      "title": "KUBERNETES_KUBEVAL: Directory containing KUBERNETES files",
      "type": "string"
    },
    "KUBERNETES_KUBEVAL_DISABLE_ERRORS": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_DISABLE_ERRORS",
      "default": false,
      "title": "KUBERNETES_KUBEVAL: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "KUBERNETES_KUBEVAL_FILE_EXTENSIONS": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBEVAL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "KUBERNETES_KUBEVAL_FILE_NAMES_REGEX": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "KUBERNETES_KUBEVAL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "KUBERNETES_KUBEVAL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_FILTER_REGEX_EXCLUDE",
      "title": "KUBERNETES_KUBEVAL: Excluding Regex",
      "type": "string"
    },
    "KUBERNETES_KUBEVAL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/KUBERNETES_KUBEVAL_FILTER_REGEX_INCLUDE",
      "title": "KUBERNETES_KUBEVAL: Including Regex",
      "type": "string"
    },
    "LATEX_CHKTEX_ARGUMENTS": {
      "$id": "#/properties/LATEX_CHKTEX_ARGUMENTS",
      "description": "LATEX_CHKTEX: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "LATEX_CHKTEX: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "LATEX_CHKTEX_CONFIG_FILE": {
      "$id": "#/properties/LATEX_CHKTEX_CONFIG_FILE",
      "default": ".chktexrc",
      "description": "LATEX_CHKTEX: User custom config file name if different from default",
      "title": "LATEX_CHKTEX: Custom config file name",
      "type": "string"
    },
    "LATEX_CHKTEX_DISABLE_ERRORS": {
      "$id": "#/properties/LATEX_CHKTEX_DISABLE_ERRORS",
      "default": false,
      "title": "LATEX_CHKTEX: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "LATEX_CHKTEX_FILE_EXTENSIONS": {
      "$id": "#/properties/LATEX_CHKTEX_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "LATEX_CHKTEX: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "LATEX_CHKTEX_FILE_NAME": {
      "$id": "#/properties/LATEX_CHKTEX_FILE_NAME",
      "default": ".chktexrc",
      "description": "LATEX_CHKTEX: User custom config file name if different from default",
      "title": "LATEX_CHKTEX: Custom config file name",
      "type": "string"
    },
    "LATEX_CHKTEX_FILE_NAMES_REGEX": {
      "$id": "#/properties/LATEX_CHKTEX_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "LATEX_CHKTEX: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "LATEX_CHKTEX_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/LATEX_CHKTEX_FILTER_REGEX_EXCLUDE",
      "title": "LATEX_CHKTEX: Excluding Regex",
      "type": "string"
    },
    "LATEX_CHKTEX_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/LATEX_CHKTEX_FILTER_REGEX_INCLUDE",
      "title": "LATEX_CHKTEX: Including Regex",
      "type": "string"
    },
    "LATEX_CHKTEX_RULES_PATH": {
      "$id": "#/properties/LATEX_CHKTEX_RULES_PATH",
      "description": "LATEX_CHKTEX: Path where to find linter configuration file",
      "title": "LATEX_CHKTEX: Custom config file path",
      "type": "string"
    },
    "LATEX_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/LATEX_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for LATEX descriptor",
      "type": "string"
    },
    "LATEX_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/LATEX_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for LATEX descriptor",
      "type": "string"
    },
    "LINTER_RULES_PATH": {
      "$id": "#/properties/LINTER_RULES_PATH",
      "default": ".github/linters",
      "description": "Directory for all linter configuration rules. Can be a local folder or a remote URL. Not necessary if your linters configuration files are at the root of your repository",
      "examples": [
        "myrulesfolder",
        "https://raw.githubusercontent.com/some_org/some_repo/mega-linter-rules"
      ],
      "title": "Linter rules path",
      "type": "string"
    },
    "LOG_FILE": {
      "$id": "#/properties/LOG_FILE",
      "default": "mega-linter.log",
      "description": "The file name for outputting logs. All output is sent to the log file regardless of LOG_LEVEL",
      "title": "Log file name",
      "type": "string"
    },
    "LOG_LEVEL": {
      "$id": "#/properties/LOG_LEVEL",
      "default": "INFO",
      "description": "How much output the script will generate to the console. One of INFO, DEBUG, WARNING or ERROR.",
      "enum": [
        "INFO",
        "DEBUG",
        "WARNING",
        "ERROR"
      ],
      "title": "Log level",
      "type": "string"
    },
    "LUA_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/LUA_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for LUA descriptor",
      "type": "string"
    },
    "LUA_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/LUA_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for LUA descriptor",
      "type": "string"
    },
    "LUA_LUACHECK_ARGUMENTS": {
      "$id": "#/properties/LUA_LUACHECK_ARGUMENTS",
      "description": "LUA_LUACHECK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_LUACHECK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "LUA_LUACHECK_CONFIG_FILE": {
      "$id": "#/properties/LUA_LUACHECK_CONFIG_FILE",
      "default": ".luacheckrc",
      "description": "LUA_LUACHECK: User custom config file name if different from default",
      "title": "LUA_LUACHECK: Custom config file name",
      "type": "string"
    },
    "LUA_LUACHECK_DISABLE_ERRORS": {
      "$id": "#/properties/LUA_LUACHECK_DISABLE_ERRORS",
      "default": false,
      "title": "LUA_LUACHECK: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "LUA_LUACHECK_FILE_EXTENSIONS": {
      "$id": "#/properties/LUA_LUACHECK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_LUACHECK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "LUA_LUACHECK_FILE_NAME": {
      "$id": "#/properties/LUA_LUACHECK_FILE_NAME",
      "default": ".luacheckrc",
      "description": "LUA_LUACHECK: User custom config file name if different from default",
      "title": "LUA_LUACHECK: Custom config file name",
      "type": "string"
    },
    "LUA_LUACHECK_FILE_NAMES_REGEX": {
      "$id": "#/properties/LUA_LUACHECK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "LUA_LUACHECK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "LUA_LUACHECK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/LUA_LUACHECK_FILTER_REGEX_EXCLUDE",
      "title": "LUA_LUACHECK: Excluding Regex",
      "type": "string"
    },
    "LUA_LUACHECK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/LUA_LUACHECK_FILTER_REGEX_INCLUDE",
      "title": "LUA_LUACHECK: Including Regex",
      "type": "string"
    },
    "LUA_LUACHECK_RULES_PATH": {
      "$id": "#/properties/LUA_LUACHECK_RULES_PATH",
      "description": "LUA_LUACHECK: Path where to find linter configuration file",
      "title": "LUA_LUACHECK: Custom config file path",
      "type": "string"
    },
    "MARKDOWN_DEFAULT_STYLE": {
      "$id": "#/properties/MARKDOWN_DEFAULT_STYLE",
      "description": "Style of markdown formatting to apply",
      "enum": [
        "markdownlint",
        "remark-lint"
      ],
      "title": "Markdown default formatting style",
      "type": "string"
    },
    "MARKDOWN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for MARKDOWN descriptor",
      "type": "string"
    },
    "MARKDOWN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for MARKDOWN descriptor",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWNLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWNLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_MARKDOWNLINT_CONFIG_FILE": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_CONFIG_FILE",
      "default": ".markdown-lint.json",
      "description": "MARKDOWN_MARKDOWNLINT: User custom config file name if different from default",
      "title": "MARKDOWN_MARKDOWNLINT: Custom config file name",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS",
      "default": false,
      "title": "MARKDOWN_MARKDOWNLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "MARKDOWN_MARKDOWNLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWNLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MARKDOWN_MARKDOWNLINT_FILE_NAME": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_FILE_NAME",
      "default": ".markdown-lint.json",
      "description": "MARKDOWN_MARKDOWNLINT: User custom config file name if different from default",
      "title": "MARKDOWN_MARKDOWNLINT: Custom config file name",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWNLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE",
      "title": "MARKDOWN_MARKDOWNLINT: Excluding Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_FILTER_REGEX_INCLUDE",
      "title": "MARKDOWN_MARKDOWNLINT: Including Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWNLINT_RULES_PATH": {
      "$id": "#/properties/MARKDOWN_MARKDOWNLINT_RULES_PATH",
      "description": "MARKDOWN_MARKDOWNLINT: Path where to find linter configuration file",
      "title": "MARKDOWN_MARKDOWNLINT: Custom config file path",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWN_LINK_CHECK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_CONFIG_FILE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_CONFIG_FILE",
      "default": ".markdown-link-check.json",
      "description": "MARKDOWN_MARKDOWN_LINK_CHECK: User custom config file name if different from default",
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Custom config file name",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS",
      "default": false,
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_FILE_EXTENSIONS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAME": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAME",
      "default": ".markdown-link-check.json",
      "description": "MARKDOWN_MARKDOWN_LINK_CHECK: User custom config file name if different from default",
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Custom config file name",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAMES_REGEX": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_EXCLUDE",
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Excluding Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_INCLUDE",
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Including Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_LINK_CHECK_RULES_PATH": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_LINK_CHECK_RULES_PATH",
      "description": "MARKDOWN_MARKDOWN_LINK_CHECK: Path where to find linter configuration file",
      "title": "MARKDOWN_MARKDOWN_LINK_CHECK: Custom config file path",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS",
      "default": false,
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_EXTENSIONS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_NAMES_REGEX": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_EXCLUDE",
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Excluding Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_INCLUDE",
      "title": "MARKDOWN_MARKDOWN_TABLE_FORMATTER: Including Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_ARGUMENTS",
      "description": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Custom arguments",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_DISABLE_ERRORS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_DISABLE_ERRORS",
      "default": false,
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_EXTENSIONS": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_NAMES_REGEX": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_EXCLUDE",
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Excluding Regex",
      "type": "string"
    },
    "MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_INCLUDE",
      "title": "MARKDOWN_MARKDOWN_TABLE_PRETTIFY: Including Regex",
      "type": "string"
    },
    "MARKDOWN_REMARK_LINT_ARGUMENTS": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_ARGUMENTS",
      "description": "MARKDOWN_REMARK_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_REMARK_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "MARKDOWN_REMARK_LINT_CONFIG_FILE": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_CONFIG_FILE",
      "default": ".remarkrc",
      "description": "MARKDOWN_REMARK_LINT: User custom config file name if different from default",
      "title": "MARKDOWN_REMARK_LINT: Custom config file name",
      "type": "string"
    },
    "MARKDOWN_REMARK_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "MARKDOWN_REMARK_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "MARKDOWN_REMARK_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_REMARK_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "MARKDOWN_REMARK_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "MARKDOWN_REMARK_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "MARKDOWN_REMARK_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_FILTER_REGEX_EXCLUDE",
      "title": "MARKDOWN_REMARK_LINT: Excluding Regex",
      "type": "string"
    },
    "MARKDOWN_REMARK_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_FILTER_REGEX_INCLUDE",
      "title": "MARKDOWN_REMARK_LINT: Including Regex",
      "type": "string"
    },
    "MARKDOWN_REMARK_LINT_RULES_PATH": {
      "$id": "#/properties/MARKDOWN_REMARK_LINT_RULES_PATH",
      "description": "MARKDOWN_REMARK_LINT: Path where to find linter configuration file",
      "title": "MARKDOWN_REMARK_LINT: Custom config file path",
      "type": "string"
    },
    "OPENAPI_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/OPENAPI_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for OPENAPI descriptor",
      "type": "string"
    },
    "OPENAPI_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/OPENAPI_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for OPENAPI descriptor",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_ARGUMENTS": {
      "$id": "#/properties/OPENAPI_SPECTRAL_ARGUMENTS",
      "description": "OPENAPI_SPECTRAL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "OPENAPI_SPECTRAL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "OPENAPI_SPECTRAL_CONFIG_FILE": {
      "$id": "#/properties/OPENAPI_SPECTRAL_CONFIG_FILE",
      "default": ".openapirc.yml",
      "description": "OPENAPI_SPECTRAL: User custom config file name if different from default",
      "title": "OPENAPI_SPECTRAL: Custom config file name",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_DISABLE_ERRORS": {
      "$id": "#/properties/OPENAPI_SPECTRAL_DISABLE_ERRORS",
      "default": false,
      "title": "OPENAPI_SPECTRAL: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "OPENAPI_SPECTRAL_FILE_EXTENSIONS": {
      "$id": "#/properties/OPENAPI_SPECTRAL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "OPENAPI_SPECTRAL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "OPENAPI_SPECTRAL_FILE_NAME": {
      "$id": "#/properties/OPENAPI_SPECTRAL_FILE_NAME",
      "default": ".openapirc.yml",
      "description": "OPENAPI_SPECTRAL: User custom config file name if different from default",
      "title": "OPENAPI_SPECTRAL: Custom config file name",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_FILE_NAMES_REGEX": {
      "$id": "#/properties/OPENAPI_SPECTRAL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "OPENAPI_SPECTRAL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "OPENAPI_SPECTRAL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/OPENAPI_SPECTRAL_FILTER_REGEX_EXCLUDE",
      "title": "OPENAPI_SPECTRAL: Excluding Regex",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE",
      "title": "OPENAPI_SPECTRAL: Including Regex",
      "type": "string"
    },
    "OPENAPI_SPECTRAL_RULES_PATH": {
      "$id": "#/properties/OPENAPI_SPECTRAL_RULES_PATH",
      "description": "OPENAPI_SPECTRAL: Path where to find linter configuration file",
      "title": "OPENAPI_SPECTRAL: Custom config file path",
      "type": "string"
    },
    "PARALLEL": {
      "$id": "#/properties/PARALLEL",
      "default": true,
      "description": "Process linters in parallel to improve overall Mega-Linter performance. If true, linters of same language or formats are grouped in the same parallel process to avoid lock issues if fixing the same files",
      "title": "Parallel processing",
      "type": "boolean"
    },
    "PERL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PERL_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for PERL descriptor",
      "type": "string"
    },
    "PERL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PERL_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for PERL descriptor",
      "type": "string"
    },
    "PERL_PERLCRITIC_ARGUMENTS": {
      "$id": "#/properties/PERL_PERLCRITIC_ARGUMENTS",
      "description": "PERL_PERLCRITIC: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PERL_PERLCRITIC: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PERL_PERLCRITIC_DISABLE_ERRORS": {
      "$id": "#/properties/PERL_PERLCRITIC_DISABLE_ERRORS",
      "default": false,
      "title": "PERL_PERLCRITIC: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PERL_PERLCRITIC_FILE_EXTENSIONS": {
      "$id": "#/properties/PERL_PERLCRITIC_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PERL_PERLCRITIC: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PERL_PERLCRITIC_FILE_NAMES_REGEX": {
      "$id": "#/properties/PERL_PERLCRITIC_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PERL_PERLCRITIC: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PERL_PERLCRITIC_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PERL_PERLCRITIC_FILTER_REGEX_EXCLUDE",
      "title": "PERL_PERLCRITIC: Excluding Regex",
      "type": "string"
    },
    "PERL_PERLCRITIC_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PERL_PERLCRITIC_FILTER_REGEX_INCLUDE",
      "title": "PERL_PERLCRITIC: Including Regex",
      "type": "string"
    },
    "PHP_BUILTIN_ARGUMENTS": {
      "$id": "#/properties/PHP_BUILTIN_ARGUMENTS",
      "description": "PHP_BUILTIN: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_BUILTIN: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_BUILTIN_DISABLE_ERRORS": {
      "$id": "#/properties/PHP_BUILTIN_DISABLE_ERRORS",
      "default": false,
      "title": "PHP_BUILTIN: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PHP_BUILTIN_FILE_EXTENSIONS": {
      "$id": "#/properties/PHP_BUILTIN_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_BUILTIN: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PHP_BUILTIN_FILE_NAMES_REGEX": {
      "$id": "#/properties/PHP_BUILTIN_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_BUILTIN: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PHP_BUILTIN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_BUILTIN_FILTER_REGEX_EXCLUDE",
      "title": "PHP_BUILTIN: Excluding Regex",
      "type": "string"
    },
    "PHP_BUILTIN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_BUILTIN_FILTER_REGEX_INCLUDE",
      "title": "PHP_BUILTIN: Including Regex",
      "type": "string"
    },
    "PHP_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for PHP descriptor",
      "type": "string"
    },
    "PHP_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for PHP descriptor",
      "type": "string"
    },
    "PHP_PHPCS_ARGUMENTS": {
      "$id": "#/properties/PHP_PHPCS_ARGUMENTS",
      "description": "PHP_PHPCS: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCS: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PHPCS_CONFIG_FILE": {
      "$id": "#/properties/PHP_PHPCS_CONFIG_FILE",
      "default": "phpcs.xml",
      "description": "PHP_PHPCS: User custom config file name if different from default",
      "title": "PHP_PHPCS: Custom config file name",
      "type": "string"
    },
    "PHP_PHPCS_DISABLE_ERRORS": {
      "$id": "#/properties/PHP_PHPCS_DISABLE_ERRORS",
      "default": false,
      "title": "PHP_PHPCS: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PHP_PHPCS_FILE_EXTENSIONS": {
      "$id": "#/properties/PHP_PHPCS_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCS: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PHP_PHPCS_FILE_NAME": {
      "$id": "#/properties/PHP_PHPCS_FILE_NAME",
      "default": "phpcs.xml",
      "description": "PHP_PHPCS: User custom config file name if different from default",
      "title": "PHP_PHPCS: Custom config file name",
      "type": "string"
    },
    "PHP_PHPCS_FILE_NAMES_REGEX": {
      "$id": "#/properties/PHP_PHPCS_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPCS: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PHP_PHPCS_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_PHPCS_FILTER_REGEX_EXCLUDE",
      "title": "PHP_PHPCS: Excluding Regex",
      "type": "string"
    },
    "PHP_PHPCS_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_PHPCS_FILTER_REGEX_INCLUDE",
      "title": "PHP_PHPCS: Including Regex",
      "type": "string"
    },
    "PHP_PHPCS_RULES_PATH": {
      "$id": "#/properties/PHP_PHPCS_RULES_PATH",
      "description": "PHP_PHPCS: Path where to find linter configuration file",
      "title": "PHP_PHPCS: Custom config file path",
      "type": "string"
    },
    "PHP_PHPSTAN_ARGUMENTS": {
      "$id": "#/properties/PHP_PHPSTAN_ARGUMENTS",
      "description": "PHP_PHPSTAN: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPSTAN: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PHPSTAN_CONFIG_FILE": {
      "$id": "#/properties/PHP_PHPSTAN_CONFIG_FILE",
      "default": "phpstan.neon",
      "description": "PHP_PHPSTAN: User custom config file name if different from default",
      "title": "PHP_PHPSTAN: Custom config file name",
      "type": "string"
    },
    "PHP_PHPSTAN_DISABLE_ERRORS": {
      "$id": "#/properties/PHP_PHPSTAN_DISABLE_ERRORS",
      "default": false,
      "title": "PHP_PHPSTAN: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PHP_PHPSTAN_FILE_EXTENSIONS": {
      "$id": "#/properties/PHP_PHPSTAN_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPSTAN: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PHP_PHPSTAN_FILE_NAME": {
      "$id": "#/properties/PHP_PHPSTAN_FILE_NAME",
      "default": "phpstan.neon",
      "description": "PHP_PHPSTAN: User custom config file name if different from default",
      "title": "PHP_PHPSTAN: Custom config file name",
      "type": "string"
    },
    "PHP_PHPSTAN_FILE_NAMES_REGEX": {
      "$id": "#/properties/PHP_PHPSTAN_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PHPSTAN: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PHP_PHPSTAN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_PHPSTAN_FILTER_REGEX_EXCLUDE",
      "title": "PHP_PHPSTAN: Excluding Regex",
      "type": "string"
    },
    "PHP_PHPSTAN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_PHPSTAN_FILTER_REGEX_INCLUDE",
      "title": "PHP_PHPSTAN: Including Regex",
      "type": "string"
    },
    "PHP_PHPSTAN_RULES_PATH": {
      "$id": "#/properties/PHP_PHPSTAN_RULES_PATH",
      "description": "PHP_PHPSTAN: Path where to find linter configuration file",
      "title": "PHP_PHPSTAN: Custom config file path",
      "type": "string"
    },
    "PHP_PSALM_ARGUMENTS": {
      "$id": "#/properties/PHP_PSALM_ARGUMENTS",
      "description": "PHP_PSALM: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PSALM: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PHP_PSALM_CONFIG_FILE": {
      "$id": "#/properties/PHP_PSALM_CONFIG_FILE",
      "default": "psalm.xml",
      "description": "PHP_PSALM: User custom config file name if different from default",
      "title": "PHP_PSALM: Custom config file name",
      "type": "string"
    },
    "PHP_PSALM_DISABLE_ERRORS": {
      "$id": "#/properties/PHP_PSALM_DISABLE_ERRORS",
      "default": false,
      "title": "PHP_PSALM: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PHP_PSALM_FILE_EXTENSIONS": {
      "$id": "#/properties/PHP_PSALM_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PSALM: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PHP_PSALM_FILE_NAME": {
      "$id": "#/properties/PHP_PSALM_FILE_NAME",
      "default": "psalm.xml",
      "description": "PHP_PSALM: User custom config file name if different from default",
      "title": "PHP_PSALM: Custom config file name",
      "type": "string"
    },
    "PHP_PSALM_FILE_NAMES_REGEX": {
      "$id": "#/properties/PHP_PSALM_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PHP_PSALM: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PHP_PSALM_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PHP_PSALM_FILTER_REGEX_EXCLUDE",
      "title": "PHP_PSALM: Excluding Regex",
      "type": "string"
    },
    "PHP_PSALM_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PHP_PSALM_FILTER_REGEX_INCLUDE",
      "title": "PHP_PSALM: Including Regex",
      "type": "string"
    },
    "PHP_PSALM_RULES_PATH": {
      "$id": "#/properties/PHP_PSALM_RULES_PATH",
      "description": "PHP_PSALM: Path where to find linter configuration file",
      "title": "PHP_PSALM: Custom config file path",
      "type": "string"
    },
    "PLUGINS": {
      "$id": "#/properties/PLUGINS",
      "description": "List of Mega-Linter plugins. URL must follow format https://**/mega-linter-plugin-**/**.mega-linter-descriptor.yml",
      "examples": [
        [
          "https://raw.githubusercontent.com/cookiejar/megalinter-plugin-cookiejar/master/cookietemplate.mega-linter-descriptor.yml"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "List of plugins loaded at runtime",
      "type": "array"
    },
    "POST_COMMANDS": {
      "$id": "#/properties/POST_COMMANDS",
      "default": [],
      "description": "Custom bash commands to run after linters",
      "examples": [
        [
          {
            "command": "npm run test",
            "continue_if_failed": false,
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Post run commands",
      "type": "array"
    },
    "POWERSHELL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/POWERSHELL_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for POWERSHELL descriptor",
      "type": "string"
    },
    "POWERSHELL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/POWERSHELL_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for POWERSHELL descriptor",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_ARGUMENTS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_ARGUMENTS",
      "description": "POWERSHELL_POWERSHELL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "POWERSHELL_POWERSHELL_CONFIG_FILE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_CONFIG_FILE",
      "default": ".powershell-psscriptanalyzer.psd1",
      "description": "POWERSHELL_POWERSHELL: User custom config file name if different from default",
      "title": "POWERSHELL_POWERSHELL: Custom config file name",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_DISABLE_ERRORS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_DISABLE_ERRORS",
      "default": false,
      "title": "POWERSHELL_POWERSHELL: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "POWERSHELL_POWERSHELL_FILE_EXTENSIONS": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_FILE_NAME": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FILE_NAME",
      "default": ".powershell-psscriptanalyzer.psd1",
      "description": "POWERSHELL_POWERSHELL: User custom config file name if different from default",
      "title": "POWERSHELL_POWERSHELL: Custom config file name",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FILE_NAMES_REGEX": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "POWERSHELL_POWERSHELL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "POWERSHELL_POWERSHELL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FILTER_REGEX_EXCLUDE",
      "title": "POWERSHELL_POWERSHELL: Excluding Regex",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_FILTER_REGEX_INCLUDE",
      "title": "POWERSHELL_POWERSHELL: Including Regex",
      "type": "string"
    },
    "POWERSHELL_POWERSHELL_RULES_PATH": {
      "$id": "#/properties/POWERSHELL_POWERSHELL_RULES_PATH",
      "description": "POWERSHELL_POWERSHELL: Path where to find linter configuration file",
      "title": "POWERSHELL_POWERSHELL: Custom config file path",
      "type": "string"
    },
    "PRE_COMMANDS": {
      "$id": "#/properties/PRE_COMMANDS",
      "default": [],
      "description": "Custom bash commands to run before linters",
      "examples": [
        [
          {
            "command": "npm install java-caller",
            "continue_if_failed": false,
            "cwd": "root"
          },
          {
            "command": "echo \"pre-run command has been called\"",
            "cwd": "workspace"
          }
        ]
      ],
      "items": {
        "$ref": "#/definitions/command_info"
      },
      "title": "Pre-run commands",
      "type": "array"
    },
    "PRINT_ALPACA": {
      "$id": "#/properties/PRINT_ALPACA",
      "default": true,
      "description": "Enable printing alpaca image to console output",
      "title": "Print le lama NUL (alpaca)",
      "type": "boolean"
    },
    "PROTOBUF_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PROTOBUF_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for PROTOBUF descriptor",
      "type": "string"
    },
    "PROTOBUF_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PROTOBUF_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for PROTOBUF descriptor",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_ARGUMENTS": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_ARGUMENTS",
      "description": "PROTOBUF_PROTOLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PROTOBUF_PROTOLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PROTOBUF_PROTOLINT_CONFIG_FILE": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_CONFIG_FILE",
      "default": ".protolintrc.yml",
      "description": "PROTOBUF_PROTOLINT: User custom config file name if different from default",
      "title": "PROTOBUF_PROTOLINT: Custom config file name",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_DISABLE_ERRORS": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_DISABLE_ERRORS",
      "default": false,
      "title": "PROTOBUF_PROTOLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PROTOBUF_PROTOLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PROTOBUF_PROTOLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PROTOBUF_PROTOLINT_FILE_NAME": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_FILE_NAME",
      "default": ".protolintrc.yml",
      "description": "PROTOBUF_PROTOLINT: User custom config file name if different from default",
      "title": "PROTOBUF_PROTOLINT: Custom config file name",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PROTOBUF_PROTOLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PROTOBUF_PROTOLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_FILTER_REGEX_EXCLUDE",
      "title": "PROTOBUF_PROTOLINT: Excluding Regex",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_FILTER_REGEX_INCLUDE",
      "title": "PROTOBUF_PROTOLINT: Including Regex",
      "type": "string"
    },
    "PROTOBUF_PROTOLINT_RULES_PATH": {
      "$id": "#/properties/PROTOBUF_PROTOLINT_RULES_PATH",
      "description": "PROTOBUF_PROTOLINT: Path where to find linter configuration file",
      "title": "PROTOBUF_PROTOLINT: Custom config file path",
      "type": "string"
    },
    "PUPPET_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PUPPET_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for PUPPET descriptor",
      "type": "string"
    },
    "PUPPET_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PUPPET_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for PUPPET descriptor",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_ARGUMENTS": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_ARGUMENTS",
      "description": "PUPPET_PUPPET_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PUPPET_PUPPET_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PUPPET_PUPPET_LINT_CONFIG_FILE": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_CONFIG_FILE",
      "default": ".puppet-lint.rc",
      "description": "PUPPET_PUPPET_LINT: User custom config file name if different from default",
      "title": "PUPPET_PUPPET_LINT: Custom config file name",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "PUPPET_PUPPET_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PUPPET_PUPPET_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PUPPET_PUPPET_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PUPPET_PUPPET_LINT_FILE_NAME": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_FILE_NAME",
      "default": ".puppet-lint.rc",
      "description": "PUPPET_PUPPET_LINT: User custom config file name if different from default",
      "title": "PUPPET_PUPPET_LINT: Custom config file name",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PUPPET_PUPPET_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PUPPET_PUPPET_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_FILTER_REGEX_EXCLUDE",
      "title": "PUPPET_PUPPET_LINT: Excluding Regex",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_FILTER_REGEX_INCLUDE",
      "title": "PUPPET_PUPPET_LINT: Including Regex",
      "type": "string"
    },
    "PUPPET_PUPPET_LINT_RULES_PATH": {
      "$id": "#/properties/PUPPET_PUPPET_LINT_RULES_PATH",
      "description": "PUPPET_PUPPET_LINT: Path where to find linter configuration file",
      "title": "PUPPET_PUPPET_LINT: Custom config file path",
      "type": "string"
    },
    "PYTHON_BLACK_ARGUMENTS": {
      "$id": "#/properties/PYTHON_BLACK_ARGUMENTS",
      "description": "PYTHON_BLACK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BLACK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_BLACK_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_BLACK_CONFIG_FILE",
      "default": ".python-black",
      "description": "PYTHON_BLACK: User custom config file name if different from default",
      "title": "PYTHON_BLACK: Custom config file name",
      "type": "string"
    },
    "PYTHON_BLACK_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_BLACK_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_BLACK: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_BLACK_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_BLACK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BLACK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_BLACK_FILE_NAME": {
      "$id": "#/properties/PYTHON_BLACK_FILE_NAME",
      "default": ".python-black",
      "description": "PYTHON_BLACK: User custom config file name if different from default",
      "title": "PYTHON_BLACK: Custom config file name",
      "type": "string"
    },
    "PYTHON_BLACK_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_BLACK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_BLACK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_BLACK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_BLACK_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_BLACK: Excluding Regex",
      "type": "string"
    },
    "PYTHON_BLACK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_BLACK_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_BLACK: Including Regex",
      "type": "string"
    },
    "PYTHON_BLACK_RULES_PATH": {
      "$id": "#/properties/PYTHON_BLACK_RULES_PATH",
      "description": "PYTHON_BLACK: Path where to find linter configuration file",
      "title": "PYTHON_BLACK: Custom config file path",
      "type": "string"
    },
    "PYTHON_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for PYTHON descriptor",
      "type": "string"
    },
    "PYTHON_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for PYTHON descriptor",
      "type": "string"
    },
    "PYTHON_FLAKE8_ARGUMENTS": {
      "$id": "#/properties/PYTHON_FLAKE8_ARGUMENTS",
      "description": "PYTHON_FLAKE8: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_FLAKE8: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_FLAKE8_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_FLAKE8_CONFIG_FILE",
      "default": ".flake8",
      "description": "PYTHON_FLAKE8: User custom config file name if different from default",
      "title": "PYTHON_FLAKE8: Custom config file name",
      "type": "string"
    },
    "PYTHON_FLAKE8_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_FLAKE8_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_FLAKE8: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_FLAKE8_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_FLAKE8_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_FLAKE8: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_FLAKE8_FILE_NAME": {
      "$id": "#/properties/PYTHON_FLAKE8_FILE_NAME",
      "default": ".flake8",
      "description": "PYTHON_FLAKE8: User custom config file name if different from default",
      "title": "PYTHON_FLAKE8: Custom config file name",
      "type": "string"
    },
    "PYTHON_FLAKE8_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_FLAKE8_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_FLAKE8: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_FLAKE8_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_FLAKE8_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_FLAKE8: Excluding Regex",
      "type": "string"
    },
    "PYTHON_FLAKE8_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_FLAKE8_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_FLAKE8: Including Regex",
      "type": "string"
    },
    "PYTHON_FLAKE8_RULES_PATH": {
      "$id": "#/properties/PYTHON_FLAKE8_RULES_PATH",
      "description": "PYTHON_FLAKE8: Path where to find linter configuration file",
      "title": "PYTHON_FLAKE8: Custom config file path",
      "type": "string"
    },
    "PYTHON_ISORT_ARGUMENTS": {
      "$id": "#/properties/PYTHON_ISORT_ARGUMENTS",
      "description": "PYTHON_ISORT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_ISORT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_ISORT_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_ISORT_CONFIG_FILE",
      "default": ".isort.cfg",
      "description": "PYTHON_ISORT: User custom config file name if different from default",
      "title": "PYTHON_ISORT: Custom config file name",
      "type": "string"
    },
    "PYTHON_ISORT_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_ISORT_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_ISORT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_ISORT_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_ISORT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_ISORT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_ISORT_FILE_NAME": {
      "$id": "#/properties/PYTHON_ISORT_FILE_NAME",
      "default": ".isort.cfg",
      "description": "PYTHON_ISORT: User custom config file name if different from default",
      "title": "PYTHON_ISORT: Custom config file name",
      "type": "string"
    },
    "PYTHON_ISORT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_ISORT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_ISORT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_ISORT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_ISORT_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_ISORT: Excluding Regex",
      "type": "string"
    },
    "PYTHON_ISORT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_ISORT_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_ISORT: Including Regex",
      "type": "string"
    },
    "PYTHON_ISORT_RULES_PATH": {
      "$id": "#/properties/PYTHON_ISORT_RULES_PATH",
      "description": "PYTHON_ISORT: Path where to find linter configuration file",
      "title": "PYTHON_ISORT: Custom config file path",
      "type": "string"
    },
    "PYTHON_PYLINT_ARGUMENTS": {
      "$id": "#/properties/PYTHON_PYLINT_ARGUMENTS",
      "description": "PYTHON_PYLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "PYTHON_PYLINT_CONFIG_FILE": {
      "$id": "#/properties/PYTHON_PYLINT_CONFIG_FILE",
      "default": ".python-lint",
      "description": "PYTHON_PYLINT: User custom config file name if different from default",
      "title": "PYTHON_PYLINT: Custom config file name",
      "type": "string"
    },
    "PYTHON_PYLINT_DISABLE_ERRORS": {
      "$id": "#/properties/PYTHON_PYLINT_DISABLE_ERRORS",
      "default": false,
      "title": "PYTHON_PYLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "PYTHON_PYLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/PYTHON_PYLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "PYTHON_PYLINT_FILE_NAME": {
      "$id": "#/properties/PYTHON_PYLINT_FILE_NAME",
      "default": ".python-lint",
      "description": "PYTHON_PYLINT: User custom config file name if different from default",
      "title": "PYTHON_PYLINT: Custom config file name",
      "type": "string"
    },
    "PYTHON_PYLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/PYTHON_PYLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "PYTHON_PYLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "PYTHON_PYLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/PYTHON_PYLINT_FILTER_REGEX_EXCLUDE",
      "title": "PYTHON_PYLINT: Excluding Regex",
      "type": "string"
    },
    "PYTHON_PYLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/PYTHON_PYLINT_FILTER_REGEX_INCLUDE",
      "title": "PYTHON_PYLINT: Including Regex",
      "type": "string"
    },
    "PYTHON_PYLINT_RULES_PATH": {
      "$id": "#/properties/PYTHON_PYLINT_RULES_PATH",
      "description": "PYTHON_PYLINT: Path where to find linter configuration file",
      "title": "PYTHON_PYLINT: Custom config file path",
      "type": "string"
    },
    "RAKU_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RAKU_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for RAKU descriptor",
      "type": "string"
    },
    "RAKU_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RAKU_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for RAKU descriptor",
      "type": "string"
    },
    "RAKU_RAKU_ARGUMENTS": {
      "$id": "#/properties/RAKU_RAKU_ARGUMENTS",
      "description": "RAKU_RAKU: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RAKU_RAKU: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RAKU_RAKU_CONFIG_FILE": {
      "$id": "#/properties/RAKU_RAKU_CONFIG_FILE",
      "default": "META6.json",
      "description": "RAKU_RAKU: User custom config file name if different from default",
      "title": "RAKU_RAKU: Custom config file name",
      "type": "string"
    },
    "RAKU_RAKU_DISABLE_ERRORS": {
      "$id": "#/properties/RAKU_RAKU_DISABLE_ERRORS",
      "default": false,
      "title": "RAKU_RAKU: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "RAKU_RAKU_FILE_EXTENSIONS": {
      "$id": "#/properties/RAKU_RAKU_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RAKU_RAKU: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RAKU_RAKU_FILE_NAME": {
      "$id": "#/properties/RAKU_RAKU_FILE_NAME",
      "default": "META6.json",
      "description": "RAKU_RAKU: User custom config file name if different from default",
      "title": "RAKU_RAKU: Custom config file name",
      "type": "string"
    },
    "RAKU_RAKU_FILE_NAMES_REGEX": {
      "$id": "#/properties/RAKU_RAKU_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RAKU_RAKU: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RAKU_RAKU_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RAKU_RAKU_FILTER_REGEX_EXCLUDE",
      "title": "RAKU_RAKU: Excluding Regex",
      "type": "string"
    },
    "RAKU_RAKU_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RAKU_RAKU_FILTER_REGEX_INCLUDE",
      "title": "RAKU_RAKU: Including Regex",
      "type": "string"
    },
    "RAKU_RAKU_RULES_PATH": {
      "$id": "#/properties/RAKU_RAKU_RULES_PATH",
      "description": "RAKU_RAKU: Path where to find linter configuration file",
      "title": "RAKU_RAKU: Custom config file path",
      "type": "string"
    },
    "REPORT_OUTPUT_FOLDER": {
      "$id": "#/properties/REPORT_OUTPUT_FOLDER",
      "default": "report",
      "description": "The location where the output reporting will be generated to",
      "title": "Output folder",
      "type": "string"
    },
    "RST_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RST_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for RST descriptor",
      "type": "string"
    },
    "RST_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RST_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for RST descriptor",
      "type": "string"
    },
    "RST_RSTCHECK_ARGUMENTS": {
      "$id": "#/properties/RST_RSTCHECK_ARGUMENTS",
      "description": "RST_RSTCHECK: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTCHECK: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RST_RSTCHECK_CONFIG_FILE": {
      "$id": "#/properties/RST_RSTCHECK_CONFIG_FILE",
      "default": ".rstcheck.cfg",
      "description": "RST_RSTCHECK: User custom config file name if different from default",
      "title": "RST_RSTCHECK: Custom config file name",
      "type": "string"
    },
    "RST_RSTCHECK_DISABLE_ERRORS": {
      "$id": "#/properties/RST_RSTCHECK_DISABLE_ERRORS",
      "default": false,
      "title": "RST_RSTCHECK: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "RST_RSTCHECK_FILE_EXTENSIONS": {
      "$id": "#/properties/RST_RSTCHECK_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTCHECK: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RST_RSTCHECK_FILE_NAME": {
      "$id": "#/properties/RST_RSTCHECK_FILE_NAME",
      "default": ".rstcheck.cfg",
      "description": "RST_RSTCHECK: User custom config file name if different from default",
      "title": "RST_RSTCHECK: Custom config file name",
      "type": "string"
    },
    "RST_RSTCHECK_FILE_NAMES_REGEX": {
      "$id": "#/properties/RST_RSTCHECK_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTCHECK: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RST_RSTCHECK_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RST_RSTCHECK_FILTER_REGEX_EXCLUDE",
      "title": "RST_RSTCHECK: Excluding Regex",
      "type": "string"
    },
    "RST_RSTCHECK_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RST_RSTCHECK_FILTER_REGEX_INCLUDE",
      "title": "RST_RSTCHECK: Including Regex",
      "type": "string"
    },
    "RST_RSTCHECK_RULES_PATH": {
      "$id": "#/properties/RST_RSTCHECK_RULES_PATH",
      "description": "RST_RSTCHECK: Path where to find linter configuration file",
      "title": "RST_RSTCHECK: Custom config file path",
      "type": "string"
    },
    "RST_RSTFMT_ARGUMENTS": {
      "$id": "#/properties/RST_RSTFMT_ARGUMENTS",
      "description": "RST_RSTFMT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTFMT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RST_RSTFMT_DISABLE_ERRORS": {
      "$id": "#/properties/RST_RSTFMT_DISABLE_ERRORS",
      "default": false,
      "title": "RST_RSTFMT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "RST_RSTFMT_FILE_EXTENSIONS": {
      "$id": "#/properties/RST_RSTFMT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTFMT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RST_RSTFMT_FILE_NAMES_REGEX": {
      "$id": "#/properties/RST_RSTFMT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RSTFMT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RST_RSTFMT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RST_RSTFMT_FILTER_REGEX_EXCLUDE",
      "title": "RST_RSTFMT: Excluding Regex",
      "type": "string"
    },
    "RST_RSTFMT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RST_RSTFMT_FILTER_REGEX_INCLUDE",
      "title": "RST_RSTFMT: Including Regex",
      "type": "string"
    },
    "RST_RST_LINT_ARGUMENTS": {
      "$id": "#/properties/RST_RST_LINT_ARGUMENTS",
      "description": "RST_RST_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RST_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RST_RST_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/RST_RST_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "RST_RST_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "RST_RST_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/RST_RST_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RST_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RST_RST_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/RST_RST_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RST_RST_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RST_RST_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RST_RST_LINT_FILTER_REGEX_EXCLUDE",
      "title": "RST_RST_LINT: Excluding Regex",
      "type": "string"
    },
    "RST_RST_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RST_RST_LINT_FILTER_REGEX_INCLUDE",
      "title": "RST_RST_LINT: Including Regex",
      "type": "string"
    },
    "RUBY_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RUBY_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for RUBY descriptor",
      "type": "string"
    },
    "RUBY_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RUBY_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for RUBY descriptor",
      "type": "string"
    },
    "RUBY_RUBOCOP_ARGUMENTS": {
      "$id": "#/properties/RUBY_RUBOCOP_ARGUMENTS",
      "description": "RUBY_RUBOCOP: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUBY_RUBOCOP: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RUBY_RUBOCOP_CONFIG_FILE": {
      "$id": "#/properties/RUBY_RUBOCOP_CONFIG_FILE",
      "default": ".ruby-lint.yml",
      "description": "RUBY_RUBOCOP: User custom config file name if different from default",
      "title": "RUBY_RUBOCOP: Custom config file name",
      "type": "string"
    },
    "RUBY_RUBOCOP_DISABLE_ERRORS": {
      "$id": "#/properties/RUBY_RUBOCOP_DISABLE_ERRORS",
      "default": false,
      "title": "RUBY_RUBOCOP: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "RUBY_RUBOCOP_FILE_EXTENSIONS": {
      "$id": "#/properties/RUBY_RUBOCOP_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUBY_RUBOCOP: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RUBY_RUBOCOP_FILE_NAME": {
      "$id": "#/properties/RUBY_RUBOCOP_FILE_NAME",
      "default": ".ruby-lint.yml",
      "description": "RUBY_RUBOCOP: User custom config file name if different from default",
      "title": "RUBY_RUBOCOP: Custom config file name",
      "type": "string"
    },
    "RUBY_RUBOCOP_FILE_NAMES_REGEX": {
      "$id": "#/properties/RUBY_RUBOCOP_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUBY_RUBOCOP: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RUBY_RUBOCOP_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RUBY_RUBOCOP_FILTER_REGEX_EXCLUDE",
      "title": "RUBY_RUBOCOP: Excluding Regex",
      "type": "string"
    },
    "RUBY_RUBOCOP_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RUBY_RUBOCOP_FILTER_REGEX_INCLUDE",
      "title": "RUBY_RUBOCOP: Including Regex",
      "type": "string"
    },
    "RUBY_RUBOCOP_RULES_PATH": {
      "$id": "#/properties/RUBY_RUBOCOP_RULES_PATH",
      "description": "RUBY_RUBOCOP: Path where to find linter configuration file",
      "title": "RUBY_RUBOCOP: Custom config file path",
      "type": "string"
    },
    "RUST_CLIPPY_ARGUMENTS": {
      "$id": "#/properties/RUST_CLIPPY_ARGUMENTS",
      "description": "RUST_CLIPPY: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUST_CLIPPY: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "RUST_CLIPPY_CONFIG_FILE": {
      "$id": "#/properties/RUST_CLIPPY_CONFIG_FILE",
      "default": ".clippy.toml",
      "description": "RUST_CLIPPY: User custom config file name if different from default",
      "title": "RUST_CLIPPY: Custom config file name",
      "type": "string"
    },
    "RUST_CLIPPY_DISABLE_ERRORS": {
      "$id": "#/properties/RUST_CLIPPY_DISABLE_ERRORS",
      "default": false,
      "title": "RUST_CLIPPY: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "RUST_CLIPPY_FILE_EXTENSIONS": {
      "$id": "#/properties/RUST_CLIPPY_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUST_CLIPPY: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "RUST_CLIPPY_FILE_NAME": {
      "$id": "#/properties/RUST_CLIPPY_FILE_NAME",
      "default": ".clippy.toml",
      "description": "RUST_CLIPPY: User custom config file name if different from default",
      "title": "RUST_CLIPPY: Custom config file name",
      "type": "string"
    },
    "RUST_CLIPPY_FILE_NAMES_REGEX": {
      "$id": "#/properties/RUST_CLIPPY_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "RUST_CLIPPY: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "RUST_CLIPPY_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RUST_CLIPPY_FILTER_REGEX_EXCLUDE",
      "title": "RUST_CLIPPY: Excluding Regex",
      "type": "string"
    },
    "RUST_CLIPPY_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RUST_CLIPPY_FILTER_REGEX_INCLUDE",
      "title": "RUST_CLIPPY: Including Regex",
      "type": "string"
    },
    "RUST_CLIPPY_RULES_PATH": {
      "$id": "#/properties/RUST_CLIPPY_RULES_PATH",
      "description": "RUST_CLIPPY: Path where to find linter configuration file",
      "title": "RUST_CLIPPY: Custom config file path",
      "type": "string"
    },
    "RUST_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/RUST_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for RUST descriptor",
      "type": "string"
    },
    "RUST_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/RUST_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for RUST descriptor",
      "type": "string"
    },
    "R_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/R_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for R descriptor",
      "type": "string"
    },
    "R_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/R_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for R descriptor",
      "type": "string"
    },
    "R_LINTR_ARGUMENTS": {
      "$id": "#/properties/R_LINTR_ARGUMENTS",
      "description": "R_LINTR: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "R_LINTR: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "R_LINTR_CONFIG_FILE": {
      "$id": "#/properties/R_LINTR_CONFIG_FILE",
      "default": ".lintr",
      "description": "R_LINTR: User custom config file name if different from default",
      "title": "R_LINTR: Custom config file name",
      "type": "string"
    },
    "R_LINTR_DISABLE_ERRORS": {
      "$id": "#/properties/R_LINTR_DISABLE_ERRORS",
      "default": false,
      "title": "R_LINTR: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "R_LINTR_FILE_EXTENSIONS": {
      "$id": "#/properties/R_LINTR_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "R_LINTR: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "R_LINTR_FILE_NAME": {
      "$id": "#/properties/R_LINTR_FILE_NAME",
      "default": ".lintr",
      "description": "R_LINTR: User custom config file name if different from default",
      "title": "R_LINTR: Custom config file name",
      "type": "string"
    },
    "R_LINTR_FILE_NAMES_REGEX": {
      "$id": "#/properties/R_LINTR_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "R_LINTR: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "R_LINTR_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/R_LINTR_FILTER_REGEX_EXCLUDE",
      "title": "R_LINTR: Excluding Regex",
      "type": "string"
    },
    "R_LINTR_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/R_LINTR_FILTER_REGEX_INCLUDE",
      "title": "R_LINTR: Including Regex",
      "type": "string"
    },
    "R_LINTR_RULES_PATH": {
      "$id": "#/properties/R_LINTR_RULES_PATH",
      "description": "R_LINTR: Path where to find linter configuration file",
      "title": "R_LINTR: Custom config file path",
      "type": "string"
    },
    "SALESFORCE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SALESFORCE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SALESFORCE descriptor",
      "type": "string"
    },
    "SALESFORCE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SALESFORCE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SALESFORCE descriptor",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_ARGUMENTS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_ARGUMENTS",
      "description": "SALESFORCE_SFDX_SCANNER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SALESFORCE_SFDX_SCANNER_DIRECTORY": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_DIRECTORY",
      "default": "force-app",
      "title": "SALESFORCE_SFDX_SCANNER: Directory containing SALESFORCE files",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS",
      "default": false,
      "title": "SALESFORCE_SFDX_SCANNER: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "SALESFORCE_SFDX_SCANNER_FILE_EXTENSIONS": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_FILE_NAMES_REGEX": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SALESFORCE_SFDX_SCANNER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SALESFORCE_SFDX_SCANNER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_FILTER_REGEX_EXCLUDE",
      "title": "SALESFORCE_SFDX_SCANNER: Excluding Regex",
      "type": "string"
    },
    "SALESFORCE_SFDX_SCANNER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SALESFORCE_SFDX_SCANNER_FILTER_REGEX_INCLUDE",
      "title": "SALESFORCE_SFDX_SCANNER: Including Regex",
      "type": "string"
    },
    "SCALA_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SCALA_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SCALA descriptor",
      "type": "string"
    },
    "SCALA_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SCALA_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SCALA descriptor",
      "type": "string"
    },
    "SCALA_SCALAFIX_ARGUMENTS": {
      "$id": "#/properties/SCALA_SCALAFIX_ARGUMENTS",
      "description": "SCALA_SCALAFIX: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SCALA_SCALAFIX: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SCALA_SCALAFIX_CONFIG_FILE": {
      "$id": "#/properties/SCALA_SCALAFIX_CONFIG_FILE",
      "default": ".scalafix.conf",
      "description": "SCALA_SCALAFIX: User custom config file name if different from default",
      "title": "SCALA_SCALAFIX: Custom config file name",
      "type": "string"
    },
    "SCALA_SCALAFIX_DISABLE_ERRORS": {
      "$id": "#/properties/SCALA_SCALAFIX_DISABLE_ERRORS",
      "default": false,
      "title": "SCALA_SCALAFIX: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "SCALA_SCALAFIX_FILE_EXTENSIONS": {
      "$id": "#/properties/SCALA_SCALAFIX_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SCALA_SCALAFIX: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SCALA_SCALAFIX_FILE_NAME": {
      "$id": "#/properties/SCALA_SCALAFIX_FILE_NAME",
      "default": ".scalafix.conf",
      "description": "SCALA_SCALAFIX: User custom config file name if different from default",
      "title": "SCALA_SCALAFIX: Custom config file name",
      "type": "string"
    },
    "SCALA_SCALAFIX_FILE_NAMES_REGEX": {
      "$id": "#/properties/SCALA_SCALAFIX_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SCALA_SCALAFIX: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SCALA_SCALAFIX_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SCALA_SCALAFIX_FILTER_REGEX_EXCLUDE",
      "title": "SCALA_SCALAFIX: Excluding Regex",
      "type": "string"
    },
    "SCALA_SCALAFIX_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SCALA_SCALAFIX_FILTER_REGEX_INCLUDE",
      "title": "SCALA_SCALAFIX: Including Regex",
      "type": "string"
    },
    "SCALA_SCALAFIX_RULES_PATH": {
      "$id": "#/properties/SCALA_SCALAFIX_RULES_PATH",
      "description": "SCALA_SCALAFIX: Path where to find linter configuration file",
      "title": "SCALA_SCALAFIX: Custom config file path",
      "type": "string"
    },
    "SHOW_ELAPSED_TIME": {
      "$id": "#/properties/SHOW_ELAPSED_TIME",
      "default": false,
      "description": "Displays elapsed time for each linter in reports",
      "title": "Show elapsed time",
      "type": "boolean"
    },
    "SNAKEMAKE_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SNAKEMAKE_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SNAKEMAKE descriptor",
      "type": "string"
    },
    "SNAKEMAKE_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SNAKEMAKE_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SNAKEMAKE descriptor",
      "type": "string"
    },
    "SNAKEMAKE_LINT_ARGUMENTS": {
      "$id": "#/properties/SNAKEMAKE_LINT_ARGUMENTS",
      "description": "SNAKEMAKE_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SNAKEMAKE_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/SNAKEMAKE_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "SNAKEMAKE_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "SNAKEMAKE_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/SNAKEMAKE_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SNAKEMAKE_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/SNAKEMAKE_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SNAKEMAKE_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SNAKEMAKE_LINT_FILTER_REGEX_EXCLUDE",
      "title": "SNAKEMAKE_LINT: Excluding Regex",
      "type": "string"
    },
    "SNAKEMAKE_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SNAKEMAKE_LINT_FILTER_REGEX_INCLUDE",
      "title": "SNAKEMAKE_LINT: Including Regex",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_ARGUMENTS": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_ARGUMENTS",
      "description": "SNAKEMAKE_SNAKEFMT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_SNAKEFMT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SNAKEMAKE_SNAKEFMT_CONFIG_FILE": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_CONFIG_FILE",
      "default": ".snakefmt.toml",
      "description": "SNAKEMAKE_SNAKEFMT: User custom config file name if different from default",
      "title": "SNAKEMAKE_SNAKEFMT: Custom config file name",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS",
      "default": false,
      "title": "SNAKEMAKE_SNAKEFMT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "SNAKEMAKE_SNAKEFMT_FILE_EXTENSIONS": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_SNAKEFMT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SNAKEMAKE_SNAKEFMT_FILE_NAME": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_FILE_NAME",
      "default": ".snakefmt.toml",
      "description": "SNAKEMAKE_SNAKEFMT: User custom config file name if different from default",
      "title": "SNAKEMAKE_SNAKEFMT: Custom config file name",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_FILE_NAMES_REGEX": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SNAKEMAKE_SNAKEFMT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SNAKEMAKE_SNAKEFMT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_FILTER_REGEX_EXCLUDE",
      "title": "SNAKEMAKE_SNAKEFMT: Excluding Regex",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_FILTER_REGEX_INCLUDE",
      "title": "SNAKEMAKE_SNAKEFMT: Including Regex",
      "type": "string"
    },
    "SNAKEMAKE_SNAKEFMT_RULES_PATH": {
      "$id": "#/properties/SNAKEMAKE_SNAKEFMT_RULES_PATH",
      "description": "SNAKEMAKE_SNAKEFMT: Path where to find linter configuration file",
      "title": "SNAKEMAKE_SNAKEFMT: Custom config file path",
      "type": "string"
    },
    "SPELL_CSPELL_ARGUMENTS": {
      "$id": "#/properties/SPELL_CSPELL_ARGUMENTS",
      "description": "SPELL_CSPELL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_CSPELL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_CSPELL_CONFIG_FILE": {
      "$id": "#/properties/SPELL_CSPELL_CONFIG_FILE",
      "default": ".cspell.json",
      "description": "SPELL_CSPELL: User custom config file name if different from default",
      "title": "SPELL_CSPELL: Custom config file name",
      "type": "string"
    },
    "SPELL_CSPELL_DISABLE_ERRORS": {
      "$id": "#/properties/SPELL_CSPELL_DISABLE_ERRORS",
      "default": false,
      "title": "SPELL_CSPELL: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "SPELL_CSPELL_FILE_EXTENSIONS": {
      "$id": "#/properties/SPELL_CSPELL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_CSPELL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SPELL_CSPELL_FILE_NAME": {
      "$id": "#/properties/SPELL_CSPELL_FILE_NAME",
      "default": ".cspell.json",
      "description": "SPELL_CSPELL: User custom config file name if different from default",
      "title": "SPELL_CSPELL: Custom config file name",
      "type": "string"
    },
    "SPELL_CSPELL_FILE_NAMES_REGEX": {
      "$id": "#/properties/SPELL_CSPELL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_CSPELL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SPELL_CSPELL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SPELL_CSPELL_FILTER_REGEX_EXCLUDE",
      "title": "SPELL_CSPELL: Excluding Regex",
      "type": "string"
    },
    "SPELL_CSPELL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SPELL_CSPELL_FILTER_REGEX_INCLUDE",
      "title": "SPELL_CSPELL: Including Regex",
      "type": "string"
    },
    "SPELL_CSPELL_RULES_PATH": {
      "$id": "#/properties/SPELL_CSPELL_RULES_PATH",
      "description": "SPELL_CSPELL: Path where to find linter configuration file",
      "title": "SPELL_CSPELL: Custom config file path",
      "type": "string"
    },
    "SPELL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SPELL_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SPELL descriptor",
      "type": "string"
    },
    "SPELL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SPELL_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SPELL descriptor",
      "type": "string"
    },
    "SPELL_MISSPELL_ARGUMENTS": {
      "$id": "#/properties/SPELL_MISSPELL_ARGUMENTS",
      "description": "SPELL_MISSPELL: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_MISSPELL: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SPELL_MISSPELL_DISABLE_ERRORS": {
      "$id": "#/properties/SPELL_MISSPELL_DISABLE_ERRORS",
      "default": false,
      "title": "SPELL_MISSPELL: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "SPELL_MISSPELL_FILE_EXTENSIONS": {
      "$id": "#/properties/SPELL_MISSPELL_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_MISSPELL: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SPELL_MISSPELL_FILE_NAMES_REGEX": {
      "$id": "#/properties/SPELL_MISSPELL_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SPELL_MISSPELL: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SPELL_MISSPELL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SPELL_MISSPELL_FILTER_REGEX_EXCLUDE",
      "title": "SPELL_MISSPELL: Excluding Regex",
      "type": "string"
    },
    "SPELL_MISSPELL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SPELL_MISSPELL_FILTER_REGEX_INCLUDE",
      "title": "SPELL_MISSPELL: Including Regex",
      "type": "string"
    },
    "SQL_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SQL_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for SQL descriptor",
      "type": "string"
    },
    "SQL_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SQL_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for SQL descriptor",
      "type": "string"
    },
    "SQL_SQL_LINT_ARGUMENTS": {
      "$id": "#/properties/SQL_SQL_LINT_ARGUMENTS",
      "description": "SQL_SQL_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQL_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "SQL_SQL_LINT_CONFIG_FILE": {
      "$id": "#/properties/SQL_SQL_LINT_CONFIG_FILE",
      "default": ".sql-config.json",
      "description": "SQL_SQL_LINT: User custom config file name if different from default",
      "title": "SQL_SQL_LINT: Custom config file name",
      "type": "string"
    },
    "SQL_SQL_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/SQL_SQL_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "SQL_SQL_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "SQL_SQL_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/SQL_SQL_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQL_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "SQL_SQL_LINT_FILE_NAME": {
      "$id": "#/properties/SQL_SQL_LINT_FILE_NAME",
      "default": ".sql-config.json",
      "description": "SQL_SQL_LINT: User custom config file name if different from default",
      "title": "SQL_SQL_LINT: Custom config file name",
      "type": "string"
    },
    "SQL_SQL_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/SQL_SQL_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "SQL_SQL_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "SQL_SQL_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/SQL_SQL_LINT_FILTER_REGEX_EXCLUDE",
      "title": "SQL_SQL_LINT: Excluding Regex",
      "type": "string"
    },
    "SQL_SQL_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/SQL_SQL_LINT_FILTER_REGEX_INCLUDE",
      "title": "SQL_SQL_LINT: Including Regex",
      "type": "string"
    },
    "SQL_SQL_LINT_RULES_PATH": {
      "$id": "#/properties/SQL_SQL_LINT_RULES_PATH",
      "description": "SQL_SQL_LINT: Path where to find linter configuration file",
      "title": "SQL_SQL_LINT: Custom config file path",
      "type": "string"
    },
    "TAP_REPORTER": {
      "$id": "#/properties/TAP_REPORTER",
      "default": false,
      "description": "General execution log mega-linter.log (same as ConsoleReporter log) + a separate log file for each processed linter",
      "title": "Activate TAP reporter",
      "type": "boolean"
    },
    "TAP_REPORTER_SUB_FOLDER": {
      "$id": "#/properties/TAP_REPORTER_SUB_FOLDER",
      "default": "tap",
      "description": "Sub-folder of reports folder containing TAP logs",
      "title": "TAP reporter sub folder",
      "type": "string"
    },
    "TEKTON_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TEKTON_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for TEKTON descriptor",
      "type": "string"
    },
    "TEKTON_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TEKTON_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for TEKTON descriptor",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_ARGUMENTS": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_ARGUMENTS",
      "description": "TEKTON_TEKTON_LINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TEKTON_TEKTON_LINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TEKTON_TEKTON_LINT_CONFIG_FILE": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_CONFIG_FILE",
      "default": ".tektonlintrc.yaml",
      "description": "TEKTON_TEKTON_LINT: User custom config file name if different from default",
      "title": "TEKTON_TEKTON_LINT: Custom config file name",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_DISABLE_ERRORS": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_DISABLE_ERRORS",
      "default": false,
      "title": "TEKTON_TEKTON_LINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "TEKTON_TEKTON_LINT_FILE_EXTENSIONS": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TEKTON_TEKTON_LINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TEKTON_TEKTON_LINT_FILE_NAME": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_FILE_NAME",
      "default": ".tektonlintrc.yaml",
      "description": "TEKTON_TEKTON_LINT: User custom config file name if different from default",
      "title": "TEKTON_TEKTON_LINT: Custom config file name",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TEKTON_TEKTON_LINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TEKTON_TEKTON_LINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_FILTER_REGEX_EXCLUDE",
      "title": "TEKTON_TEKTON_LINT: Excluding Regex",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_FILTER_REGEX_INCLUDE",
      "title": "TEKTON_TEKTON_LINT: Including Regex",
      "type": "string"
    },
    "TEKTON_TEKTON_LINT_RULES_PATH": {
      "$id": "#/properties/TEKTON_TEKTON_LINT_RULES_PATH",
      "description": "TEKTON_TEKTON_LINT: Path where to find linter configuration file",
      "title": "TEKTON_TEKTON_LINT: Custom config file path",
      "type": "string"
    },
    "TERRAFORM_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TERRAFORM_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for TERRAFORM descriptor",
      "type": "string"
    },
    "TERRAFORM_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TERRAFORM_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for TERRAFORM descriptor",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_ARGUMENTS",
      "description": "TERRAFORM_TERRAGRUNT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAGRUNT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TERRAGRUNT_CONFIG_FILE": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_CONFIG_FILE",
      "default": "terragrunt.hcl",
      "description": "TERRAFORM_TERRAGRUNT: User custom config file name if different from default",
      "title": "TERRAFORM_TERRAGRUNT: Custom config file name",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_DISABLE_ERRORS": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_DISABLE_ERRORS",
      "default": false,
      "title": "TERRAFORM_TERRAGRUNT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "TERRAFORM_TERRAGRUNT_FILE_EXTENSIONS": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAGRUNT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TERRAFORM_TERRAGRUNT_FILE_NAME": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_FILE_NAME",
      "default": "terragrunt.hcl",
      "description": "TERRAFORM_TERRAGRUNT: User custom config file name if different from default",
      "title": "TERRAFORM_TERRAGRUNT: Custom config file name",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_FILE_NAMES_REGEX": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRAGRUNT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TERRAFORM_TERRAGRUNT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_FILTER_REGEX_EXCLUDE",
      "title": "TERRAFORM_TERRAGRUNT: Excluding Regex",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_FILTER_REGEX_INCLUDE",
      "title": "TERRAFORM_TERRAGRUNT: Including Regex",
      "type": "string"
    },
    "TERRAFORM_TERRAGRUNT_RULES_PATH": {
      "$id": "#/properties/TERRAFORM_TERRAGRUNT_RULES_PATH",
      "description": "TERRAFORM_TERRAGRUNT: Path where to find linter configuration file",
      "title": "TERRAFORM_TERRAGRUNT: Custom config file path",
      "type": "string"
    },
    "TERRAFORM_TERRASCAN_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_ARGUMENTS",
      "description": "TERRAFORM_TERRASCAN: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRASCAN: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TERRASCAN_DISABLE_ERRORS": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_DISABLE_ERRORS",
      "default": false,
      "title": "TERRAFORM_TERRASCAN: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "TERRAFORM_TERRASCAN_FILE_EXTENSIONS": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRASCAN: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TERRAFORM_TERRASCAN_FILE_NAMES_REGEX": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TERRASCAN: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TERRAFORM_TERRASCAN_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_FILTER_REGEX_EXCLUDE",
      "title": "TERRAFORM_TERRASCAN: Excluding Regex",
      "type": "string"
    },
    "TERRAFORM_TERRASCAN_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TERRAFORM_TERRASCAN_FILTER_REGEX_INCLUDE",
      "title": "TERRAFORM_TERRASCAN: Including Regex",
      "type": "string"
    },
    "TERRAFORM_TFLINT_ARGUMENTS": {
      "$id": "#/properties/TERRAFORM_TFLINT_ARGUMENTS",
      "description": "TERRAFORM_TFLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TFLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TERRAFORM_TFLINT_CONFIG_FILE": {
      "$id": "#/properties/TERRAFORM_TFLINT_CONFIG_FILE",
      "default": ".tflint.hcl",
      "description": "TERRAFORM_TFLINT: User custom config file name if different from default",
      "title": "TERRAFORM_TFLINT: Custom config file name",
      "type": "string"
    },
    "TERRAFORM_TFLINT_DISABLE_ERRORS": {
      "$id": "#/properties/TERRAFORM_TFLINT_DISABLE_ERRORS",
      "default": false,
      "title": "TERRAFORM_TFLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "TERRAFORM_TFLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/TERRAFORM_TFLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TFLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TERRAFORM_TFLINT_FILE_NAME": {
      "$id": "#/properties/TERRAFORM_TFLINT_FILE_NAME",
      "default": ".tflint.hcl",
      "description": "TERRAFORM_TFLINT: User custom config file name if different from default",
      "title": "TERRAFORM_TFLINT: Custom config file name",
      "type": "string"
    },
    "TERRAFORM_TFLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/TERRAFORM_TFLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TERRAFORM_TFLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TERRAFORM_TFLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TERRAFORM_TFLINT_FILTER_REGEX_EXCLUDE",
      "title": "TERRAFORM_TFLINT: Excluding Regex",
      "type": "string"
    },
    "TERRAFORM_TFLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TERRAFORM_TFLINT_FILTER_REGEX_INCLUDE",
      "title": "TERRAFORM_TFLINT: Including Regex",
      "type": "string"
    },
    "TERRAFORM_TFLINT_RULES_PATH": {
      "$id": "#/properties/TERRAFORM_TFLINT_RULES_PATH",
      "description": "TERRAFORM_TFLINT: Path where to find linter configuration file",
      "title": "TERRAFORM_TFLINT: Custom config file path",
      "type": "string"
    },
    "TEXT_REPORTER": {
      "$id": "#/properties/TEXT_REPORTER",
      "default": true,
      "description": "General execution log mega-linter.log (same as ConsoleReporter log) + a separate log file for each processed linter",
      "title": "Activate text reporter",
      "type": "boolean"
    },
    "TEXT_REPORTER_SUB_FOLDER": {
      "$id": "#/properties/TEXT_REPORTER_SUB_FOLDER",
      "default": "linters_logs",
      "description": "Sub-folder of reports folder containing text logs",
      "title": "Text reporter sub folder",
      "type": "string"
    },
    "TSX_ESLINT_ARGUMENTS": {
      "$id": "#/properties/TSX_ESLINT_ARGUMENTS",
      "description": "TSX_ESLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TSX_ESLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TSX_ESLINT_CONFIG_FILE": {
      "$id": "#/properties/TSX_ESLINT_CONFIG_FILE",
      "default": ".eslintrc.json",
      "description": "TSX_ESLINT: User custom config file name if different from default",
      "title": "TSX_ESLINT: Custom config file name",
      "type": "string"
    },
    "TSX_ESLINT_DISABLE_ERRORS": {
      "$id": "#/properties/TSX_ESLINT_DISABLE_ERRORS",
      "default": false,
      "title": "TSX_ESLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "TSX_ESLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/TSX_ESLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TSX_ESLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TSX_ESLINT_FILE_NAME": {
      "$id": "#/properties/TSX_ESLINT_FILE_NAME",
      "default": ".eslintrc.json",
      "description": "TSX_ESLINT: User custom config file name if different from default",
      "title": "TSX_ESLINT: Custom config file name",
      "type": "string"
    },
    "TSX_ESLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/TSX_ESLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TSX_ESLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TSX_ESLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TSX_ESLINT_FILTER_REGEX_EXCLUDE",
      "title": "TSX_ESLINT: Excluding Regex",
      "type": "string"
    },
    "TSX_ESLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TSX_ESLINT_FILTER_REGEX_INCLUDE",
      "title": "TSX_ESLINT: Including Regex",
      "type": "string"
    },
    "TSX_ESLINT_RULES_PATH": {
      "$id": "#/properties/TSX_ESLINT_RULES_PATH",
      "description": "TSX_ESLINT: Path where to find linter configuration file",
      "title": "TSX_ESLINT: Custom config file path",
      "type": "string"
    },
    "TSX_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TSX_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for TSX descriptor",
      "type": "string"
    },
    "TSX_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TSX_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for TSX descriptor",
      "type": "string"
    },
    "TYPESCRIPT_DEFAULT_STYLE": {
      "$id": "#/properties/TYPESCRIPT_DEFAULT_STYLE",
      "description": "Style of typescript formatting to apply",
      "enum": [
        "standard",
        "prettier"
      ],
      "examples": [
        "standard",
        "prettier"
      ],
      "title": "Typescript default style",
      "type": "string"
    },
    "TYPESCRIPT_ES_ARGUMENTS": {
      "$id": "#/properties/TYPESCRIPT_ES_ARGUMENTS",
      "description": "TYPESCRIPT_ES: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_ES: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TYPESCRIPT_ES_CONFIG_FILE": {
      "$id": "#/properties/TYPESCRIPT_ES_CONFIG_FILE",
      "default": ".eslintrc.json",
      "description": "TYPESCRIPT_ES: User custom config file name if different from default",
      "title": "TYPESCRIPT_ES: Custom config file name",
      "type": "string"
    },
    "TYPESCRIPT_ES_DISABLE_ERRORS": {
      "$id": "#/properties/TYPESCRIPT_ES_DISABLE_ERRORS",
      "default": false,
      "title": "TYPESCRIPT_ES: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "TYPESCRIPT_ES_FILE_EXTENSIONS": {
      "$id": "#/properties/TYPESCRIPT_ES_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_ES: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TYPESCRIPT_ES_FILE_NAME": {
      "$id": "#/properties/TYPESCRIPT_ES_FILE_NAME",
      "default": ".eslintrc.json",
      "description": "TYPESCRIPT_ES: User custom config file name if different from default",
      "title": "TYPESCRIPT_ES: Custom config file name",
      "type": "string"
    },
    "TYPESCRIPT_ES_FILE_NAMES_REGEX": {
      "$id": "#/properties/TYPESCRIPT_ES_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_ES: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TYPESCRIPT_ES_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TYPESCRIPT_ES_FILTER_REGEX_EXCLUDE",
      "title": "TYPESCRIPT_ES: Excluding Regex",
      "type": "string"
    },
    "TYPESCRIPT_ES_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TYPESCRIPT_ES_FILTER_REGEX_INCLUDE",
      "title": "TYPESCRIPT_ES: Including Regex",
      "type": "string"
    },
    "TYPESCRIPT_ES_RULES_PATH": {
      "$id": "#/properties/TYPESCRIPT_ES_RULES_PATH",
      "description": "TYPESCRIPT_ES: Path where to find linter configuration file",
      "title": "TYPESCRIPT_ES: Custom config file path",
      "type": "string"
    },
    "TYPESCRIPT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TYPESCRIPT_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for TYPESCRIPT descriptor",
      "type": "string"
    },
    "TYPESCRIPT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TYPESCRIPT_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for TYPESCRIPT descriptor",
      "type": "string"
    },
    "TYPESCRIPT_PRETTIER_ARGUMENTS": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_ARGUMENTS",
      "description": "TYPESCRIPT_PRETTIER: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_PRETTIER: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TYPESCRIPT_PRETTIER_CONFIG_FILE": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_CONFIG_FILE",
      "default": ".prettierrc.json",
      "description": "TYPESCRIPT_PRETTIER: User custom config file name if different from default",
      "title": "TYPESCRIPT_PRETTIER: Custom config file name",
      "type": "string"
    },
    "TYPESCRIPT_PRETTIER_DISABLE_ERRORS": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_DISABLE_ERRORS",
      "default": false,
      "title": "TYPESCRIPT_PRETTIER: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "TYPESCRIPT_PRETTIER_FILE_EXTENSIONS": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_PRETTIER: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TYPESCRIPT_PRETTIER_FILE_NAMES_REGEX": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_PRETTIER: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TYPESCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE",
      "title": "TYPESCRIPT_PRETTIER: Excluding Regex",
      "type": "string"
    },
    "TYPESCRIPT_PRETTIER_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_FILTER_REGEX_INCLUDE",
      "title": "TYPESCRIPT_PRETTIER: Including Regex",
      "type": "string"
    },
    "TYPESCRIPT_PRETTIER_RULES_PATH": {
      "$id": "#/properties/TYPESCRIPT_PRETTIER_RULES_PATH",
      "description": "TYPESCRIPT_PRETTIER: Path where to find linter configuration file",
      "title": "TYPESCRIPT_PRETTIER: Custom config file path",
      "type": "string"
    },
    "TYPESCRIPT_STANDARD_ARGUMENTS": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_ARGUMENTS",
      "description": "TYPESCRIPT_STANDARD: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_STANDARD: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "TYPESCRIPT_STANDARD_DISABLE_ERRORS": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_DISABLE_ERRORS",
      "default": false,
      "title": "TYPESCRIPT_STANDARD: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "TYPESCRIPT_STANDARD_FILE_EXTENSIONS": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_STANDARD: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "TYPESCRIPT_STANDARD_FILE_NAMES_REGEX": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "TYPESCRIPT_STANDARD: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "TYPESCRIPT_STANDARD_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_FILTER_REGEX_EXCLUDE",
      "title": "TYPESCRIPT_STANDARD: Excluding Regex",
      "type": "string"
    },
    "TYPESCRIPT_STANDARD_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/TYPESCRIPT_STANDARD_FILTER_REGEX_INCLUDE",
      "title": "TYPESCRIPT_STANDARD: Including Regex",
      "type": "string"
    },
    "VALIDATE_ALL_CODEBASE": {
      "$id": "#/properties/SHOW_ELAPSED_TIME",
      "default": true,
      "description": "Will parse the entire repository and find all files to validate across all types. When set to false, only new or edited files will be parsed for validation.",
      "title": "Validate all code base",
      "type": "boolean"
    },
    "VBDOTNET_DOTNET_FORMAT_ARGUMENTS": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_ARGUMENTS",
      "description": "VBDOTNET_DOTNET_FORMAT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS",
      "default": false,
      "title": "VBDOTNET_DOTNET_FORMAT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "VBDOTNET_DOTNET_FORMAT_FILE_EXTENSIONS": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "VBDOTNET_DOTNET_FORMAT_FILE_NAMES_REGEX": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "VBDOTNET_DOTNET_FORMAT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE",
      "title": "VBDOTNET_DOTNET_FORMAT: Excluding Regex",
      "type": "string"
    },
    "VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_INCLUDE",
      "title": "VBDOTNET_DOTNET_FORMAT: Including Regex",
      "type": "string"
    },
    "VBDOTNET_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/VBDOTNET_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for VBDOTNET descriptor",
      "type": "string"
    },
    "VBDOTNET_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/VBDOTNET_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for VBDOTNET descriptor",
      "type": "string"
    },
    "XML_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/XML_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for XML descriptor",
      "type": "string"
    },
    "XML_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/XML_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for XML descriptor",
      "type": "string"
    },
    "XML_XMLLINT_ARGUMENTS": {
      "$id": "#/properties/XML_XMLLINT_ARGUMENTS",
      "description": "XML_XMLLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "XML_XMLLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "XML_XMLLINT_DISABLE_ERRORS": {
      "$id": "#/properties/XML_XMLLINT_DISABLE_ERRORS",
      "default": false,
      "title": "XML_XMLLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "XML_XMLLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/XML_XMLLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "XML_XMLLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "XML_XMLLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/XML_XMLLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "XML_XMLLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "XML_XMLLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/XML_XMLLINT_FILTER_REGEX_EXCLUDE",
      "title": "XML_XMLLINT: Excluding Regex",
      "type": "string"
    },
    "XML_XMLLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/XML_XMLLINT_FILTER_REGEX_INCLUDE",
      "title": "XML_XMLLINT: Including Regex",
      "type": "string"
    },
    "YAML_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/YAML_FILTER_REGEX_EXCLUDE",
      "title": "Excluding regex filter for YAML descriptor",
      "type": "string"
    },
    "YAML_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/YAML_FILTER_REGEX_INCLUDE",
      "title": "Including regex filter for YAML descriptor",
      "type": "string"
    },
    "YAML_V8R_ARGUMENTS": {
      "$id": "#/properties/YAML_V8R_ARGUMENTS",
      "description": "YAML_V8R: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_V8R: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "YAML_V8R_DISABLE_ERRORS": {
      "$id": "#/properties/YAML_V8R_DISABLE_ERRORS",
      "default": false,
      "title": "YAML_V8R: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "YAML_V8R_FILE_EXTENSIONS": {
      "$id": "#/properties/YAML_V8R_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_V8R: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "YAML_V8R_FILE_NAMES_REGEX": {
      "$id": "#/properties/YAML_V8R_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_V8R: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "YAML_V8R_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/YAML_V8R_FILTER_REGEX_EXCLUDE",
      "title": "YAML_V8R: Excluding Regex",
      "type": "string"
    },
    "YAML_V8R_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/YAML_V8R_FILTER_REGEX_INCLUDE",
      "title": "YAML_V8R: Including Regex",
      "type": "string"
    },
    "YAML_YAMLLINT_ARGUMENTS": {
      "$id": "#/properties/YAML_YAMLLINT_ARGUMENTS",
      "description": "YAML_YAMLLINT: User custom arguments to add in linter CLI call",
      "examples:": [
        "--foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_YAMLLINT: Custom arguments",
      "type": [
        "array",
        "string"
      ]
    },
    "YAML_YAMLLINT_CONFIG_FILE": {
      "$id": "#/properties/YAML_YAMLLINT_CONFIG_FILE",
      "default": ".yaml-lint.yml",
      "description": "YAML_YAMLLINT: User custom config file name if different from default",
      "title": "YAML_YAMLLINT: Custom config file name",
      "type": "string"
    },
    "YAML_YAMLLINT_DISABLE_ERRORS": {
      "$id": "#/properties/YAML_YAMLLINT_DISABLE_ERRORS",
      "default": false,
      "title": "YAML_YAMLLINT: Linter does not make Mega-Linter fail even if errors are found",
      "type": "boolean"
    },
    "YAML_YAMLLINT_FILE_EXTENSIONS": {
      "$id": "#/properties/YAML_YAMLLINT_FILE_EXTENSIONS",
      "examples:": [
        ".py",
        ".myext"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_YAMLLINT: Override descriptor/linter matching files extensions",
      "type": "array"
    },
    "YAML_YAMLLINT_FILE_NAME": {
      "$id": "#/properties/YAML_YAMLLINT_FILE_NAME",
      "default": ".yaml-lint.yml",
      "description": "YAML_YAMLLINT: User custom config file name if different from default",
      "title": "YAML_YAMLLINT: Custom config file name",
      "type": "string"
    },
    "YAML_YAMLLINT_FILE_NAMES_REGEX": {
      "$id": "#/properties/YAML_YAMLLINT_FILE_NAMES_REGEX",
      "examples": [
        "Dockerfile(-.+)?",
        "Jenkinsfile"
      ],
      "items": {
        "type": "string"
      },
      "title": "YAML_YAMLLINT: Override descriptor/linter matching file name regex",
      "type": "array"
    },
    "YAML_YAMLLINT_FILTER_REGEX_EXCLUDE": {
      "$id": "#/properties/YAML_YAMLLINT_FILTER_REGEX_EXCLUDE",
      "title": "YAML_YAMLLINT: Excluding Regex",
      "type": "string"
    },
    "YAML_YAMLLINT_FILTER_REGEX_INCLUDE": {
      "$id": "#/properties/YAML_YAMLLINT_FILTER_REGEX_INCLUDE",
      "title": "YAML_YAMLLINT: Including Regex",
      "type": "string"
    },
    "YAML_YAMLLINT_RULES_PATH": {
      "$id": "#/properties/YAML_YAMLLINT_RULES_PATH",
      "description": "YAML_YAMLLINT: Path where to find linter configuration file",
      "title": "YAML_YAMLLINT: Custom config file path",
      "type": "string"
    }
  }
}